te loop!</span>
<span class="comment">// `ones.min()` causes an infinite loop, so we won&#39;t reach this point!</span>
<span class="macro">println</span><span class="macro">!</span>(<span class="string">&quot;The smallest number one is {}.&quot;</span>, <span class="ident">least</span>);<a class="test-arrow" target="_blank" href="https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20ones%20%3D%20std%3A%3Aiter%3A%3Arepeat(1)%3B%0Alet%20least%20%3D%20ones.min().unwrap()%3B%20%2F%2F%20Oh%20no!%20An%20infinite%20loop!%0A%2F%2F%20%60ones.min()%60%20causes%20an%20infinite%20loop%2C%20so%20we%20won't%20reach%20this%20point!%0Aprintln!(%22The%20smallest%20number%20one%20is%20%7B%7D.%22%2C%20least)%3B%0A%7D&amp;edition=2018">Run</a></pre></div>
</div><h2 id='structs' class='section-header'><a href="#structs">Structs</a></h2>
<table><tr class='module-item'><td><a class="struct" href="struct.Chain.html" title='core::iter::Chain struct'>Chain</a></td><td class='docblock-short'><p>An iterator that links two iterators together, in a chain.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Cloned.html" title='core::iter::Cloned struct'>Cloned</a></td><td class='docblock-short'><p>An iterator that clones the elements of an underlying iterator.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Copied.html" title='core::iter::Copied struct'>Copied</a></td><td class='docblock-short'><p>An iterator that copies the elements of an underlying iterator.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Cycle.html" title='core::iter::Cycle struct'>Cycle</a></td><td class='docblock-short'><p>An iterator that repeats endlessly.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Empty.html" title='core::iter::Empty struct'>Empty</a></td><td class='docblock-short'><p>An iterator that yields nothing.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Enumerate.html" title='core::iter::Enumerate struct'>Enumerate</a></td><td class='docblock-short'><p>An iterator that yields the current count and the element during iteration.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Filter.html" title='core::iter::Filter struct'>Filter</a></td><td class='docblock-short'><p>An iterator that filters the elements of <code>iter</code> with <code>predicate</code>.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.FilterMap.html" title='core::iter::FilterMap struct'>FilterMap</a></td><td class='docblock-short'><p>An iterator that uses <code>f</code> to both filter and map elements from <code>iter</code>.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.FlatMap.html" title='core::iter::FlatMap struct'>FlatMap</a></td><td class='docblock-short'><p>An iterator that maps each element to an iterator, and yields the elements
of the produced iterators.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Flatten.html" title='core::iter::Flatten struct'>Flatten</a></td><td class='docblock-short'><p>An iterator that flattens one level of nesting in an iterator of things
that can be turned into iterators.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.FromFn.html" title='core::iter::FromFn struct'>FromFn</a></td><td class='docblock-short'><p>An iterator where each iteration calls the provided closure <code>F: FnMut() -&gt; Option&lt;T&gt;</code>.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Fuse.html" title='core::iter::Fuse struct'>Fuse</a></td><td class='docblock-short'><p>An iterator that yields <code>None</code> forever after the underlying iterator
yields <code>None</code> once.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Inspect.html" title='core::iter::Inspect struct'>Inspect</a></td><td class='docblock-short'><p>An iterator that calls a function with a reference to each element before
yielding it.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Map.html" title='core::iter::Map struct'>Map</a></td><td class='docblock-short'><p>An iterator that maps the values of <code>iter</code> with <code>f</code>.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Once.html" title='core::iter::Once struct'>Once</a></td><td class='docblock-short'><p>An iterator that yields an element exactly once.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Peekable.html" title='core::iter::Peekable struct'>Peekable</a></td><td class='docblock-short'><p>An iterator with a <code>peek()</code> that returns an optional reference to the next
element.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Repeat.html" title='core::iter::Repeat struct'>Repeat</a></td><td class='docblock-short'><p>An iterator that repeats an element endlessly.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.RepeatWith.html" title='core::iter::RepeatWith struct'>RepeatWith</a></td><td class='docblock-short'><p>An iterator that repeats elements of type <code>A</code> endlessly by
applying the provided closure <code>F: FnMut() -&gt; A</code>.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Rev.html" title='core::iter::Rev struct'>Rev</a></td><td class='docblock-short'><p>A double-ended iterator with the direction inverted.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Scan.html" title='core::iter::Scan struct'>Scan</a></td><td class='docblock-short'><p>An iterator to maintain state while iterating another iterator.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Skip.html" title='core::iter::Skip struct'>Skip</a></td><td class='docblock-short'><p>An iterator that skips over <code>n</code> elements of <code>iter</code>.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.SkipWhile.html" title='core::iter::SkipWhile struct'>SkipWhile</a></td><td class='docblock-short'><p>An iterator that rejects elements while <code>predicate</code> returns <code>true</code>.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.StepBy.html" title='core::iter::StepBy struct'>StepBy</a></td><td class='docblock-short'><p>An iterator for stepping iterators by a custom amount.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Successors.html" title='core::iter::Successors struct'>Successors</a></td><td class='docblock-short'><p>An new iterator where each successive item is computed based on the preceding one.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Take.html" 
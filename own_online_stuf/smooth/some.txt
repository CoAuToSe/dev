// INITIAL HLSL BEGIN

#pragma warning( disable: 3556 3571 )
float float_ctor(int x0)
{
    return float(x0);
}
float2 vec2_ctor(float x0, float x1)
{
    return float2(x0, x1);
}
float2 vec2_ctor(int x0, int x1)
{
    return float2(x0, x1);
}
float2x2 mat2_ctor(float x0, float x1, float x2, float x3)
{
    return float2x2(x0, x1, x2, x3);
}
float3 vec3_ctor(float x0)
{
    return float3(x0, x0, x0);
}
float3 vec3_ctor(float x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
float3 vec3_ctor(float x0, float2 x1)
{
    return float3(x0, x1);
}
float3 vec3_ctor(float2 x0, float x1)
{
    return float3(x0, x1);
}
float3 vec3_ctor(int x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
float3x3 mat3_ctor(float3 x0, float3 x1, float3 x2)
{
    return float3x3(x0, x1, x2);
}
float4 vec4_ctor(float x0, float x1, float x2, float x3)
{
    return float4(x0, x1, x2, x3);
}
float4 vec4_ctor(float x0, float x1, int x2, int x3)
{
    return float4(x0, x1, x2, x3);
}
float4 vec4_ctor(float x0, float3 x1)
{
    return float4(x0, x1);
}
float4 vec4_ctor(float3 x0, float x1)
{
    return float4(x0, x1);
}
float4 vec4_ctor(int x0, float2 x1, float x2)
{
    return float4(x0, x1, x2);
}
int2 ivec2_ctor(float2 x0)
{
    return int2(x0);
}
// Uniforms

uniform float3 _iResolution : register(c0);
uniform float _iTime : register(c1);
uniform int _iFrame : register(c2);
static const uint _iChannel1 = 0;
static const uint _iChannel2 = 1;
static const uint _iChannel3 = 2;
uniform Texture2D textures2D[3] : register(t0);
uniform SamplerState samplers2D[3] : register(s0);
static const uint _iChannel0 = 3;
static const uint textureIndexOffset3D = 3;
static const uint samplerIndexOffset3D = 3;
uniform Texture3D textures3D[1] : register(t3);
uniform SamplerState samplers3D[1] : register(s3);
#ifdef ANGLE_ENABLE_LOOP_FLATTEN
#define LOOP [loop]
#define FLATTEN [flatten]
#else
#define LOOP
#define FLATTEN
#endif

#define ATOMIC_COUNTER_ARRAY_STRIDE 4

// Varyings

static float4 out_shadertoy_out_color = {0, 0, 0, 0};
static float4 gl_FragCoord = float4(0, 0, 0, 0);

cbuffer DriverConstants : register(b1)
{
    float4 dx_ViewCoords : packoffset(c1);
    float3 dx_DepthFront : packoffset(c2);
    float2 dx_ViewScale : packoffset(c3);
    struct SamplerMetadata
    {
        int baseLevel;
        int internalFormatBits;
        int wrapModes;
        int padding;
        int4 intBorderColor;
    };
    SamplerMetadata samplerMetadata[4] : packoffset(c4);
};

float4 gl_texture2D(uint samplerIndex, float2 t)
{
    return textures2D[samplerIndex].Sample(samplers2D[samplerIndex], float2(t.x, t.y));
}

float4 gl_texture2DLod(uint samplerIndex, float2 t, float lod)
{
    return textures2D[samplerIndex].SampleLevel(samplers2D[samplerIndex], float2(t.x, t.y), lod);
}

float4 gl_texture2DFetch(uint samplerIndex, int2 t, int mip)
{
    return textures2D[samplerIndex].Load(int3(t.x, t.y, mip));
}

float4 gl_texture3D(uint samplerIndex, float3 t)
{
    const uint textureIndex = samplerIndex - textureIndexOffset3D;
    const uint samplerArrayIndex = samplerIndex - samplerIndexOffset3D;
    return textures3D[textureIndex].Sample(samplers3D[samplerArrayIndex], float3(t.x, t.y, t.z));
}

float4 gl_texture3DLod(uint samplerIndex, float3 t, float lod)
{
    const uint textureIndex = samplerIndex - textureIndexOffset3D;
    const uint samplerArrayIndex = samplerIndex - samplerIndexOffset3D;
    return textures3D[textureIndex].SampleLevel(samplers3D[samplerArrayIndex], float3(t.x, t.y, t.z), lod);
}

#define GL_USES_FRAG_COORD
float atan_emu(float y, float x)
{
    if(x == 0 && y == 0) x = 1;
    return atan2(y, x);
}


float mod_emu(float x, float y)
{
    return x - y * floor(x / y);
}


float dyn_index_vec4_float4(in float4 base, in int index)
{
switch (index) {
case (0):
return base[0];
case (1):
return base[1];
case (2):
return base[2];
case (3):
return base[3];
default:
break;
}
if ((index < 0))
{
return base[0];
}
{
return base[3];
}
}
void dyn_index_write_vec4_float4(inout float4 base, in int index, in float value)
{
switch (index) {
case (0):
(base[0] = value);
return;
case (1):
(base[1] = value);
return;
case (2):
(base[2] = value);
return;
case (3):
(base[3] = value);
return;
default:
break;
}
if ((index < 0))
{
(base[0] = value);
return;
}
{
(base[3] = value);
}
}
void f_mainImage_float4(inout float4 _fragColor, in float2 _fragCoord);
;
@@ PIXEL OUTPUT @@

PS_OUTPUT main(@@ PIXEL MAIN PARAMETERS @@){
@@ MAIN PROLOGUE @@
(out_shadertoy_out_color = float4(1.0, 1.0, 1.0, 1.0));
float4 _color3110 = {0.0, 0.0, 0.0, 1.0};
f_mainImage_float4(_color3110, gl_FragCoord.xy);
if ((out_shadertoy_out_color.x < 0.0))
{
(_color3110 = float4(1.0, 0.0, 0.0, 1.0));
}
if ((out_shadertoy_out_color.y < 0.0))
{
(_color3110 = float4(0.0, 1.0, 0.0, 1.0));
}
if ((out_shadertoy_out_color.z < 0.0))
{
(_color3110 = float4(0.0, 0.0, 1.0, 1.0));
}
if ((out_shadertoy_out_color.w < 0.0))
{
(_color3110 = float4(1.0, 1.0, 0.0, 1.0));
}
(out_shadertoy_out_color = vec4_ctor(_color3110.xyz, 1.0));
return generateOutput();
}
float f_smin(in float _a, in float _b, in float _k)
{
float _h3115 = max((_k - abs((_a - _b))), 0.0);
return (min(_a, _b) - (((_h3115 * _h3115) * 0.25) / _k));
}
float f_smax(in float _a, in float _b, in float _k)
{
(_k *= 1.4);
float _h3120 = max((_k - abs((_a - _b))), 0.0);
return (max(_a, _b) + (((_h3120 * _h3120) * _h3120) / ((6.0 * _k) * _k)));
}
float f_sclamp(in float _x, in float _a, in float _b)
{
float _k3130 = {0.1};
return f_smax(f_smin(_x, _b, _k3130), _a, _k3130);
}
float f_opOnion(in float _sdf, in float _thickness)
{
return (abs(_sdf) - _thickness);
}
float f_det(in float2 _a, in float2 _b)
{
return ((_a.x * _b.y) - (_b.x * _a.y));
}
float f_sdTorus(in float3 _p, in float _ra, in float _rb)
{
return (length(vec2_ctor((length(_p.xz) - _ra), _p.y)) - _rb);
}
float f_sdCappedTorus(in float3 _p, in float2 _sc, in float _ra, in float _rb)
{
(_p.x = abs(_p.x));
float sdc8 = {0};
if (((_sc.y * _p.x) > (_sc.x * _p.z)))
{
(sdc8 = dot(_p.xz, _sc));
}
else
{
(sdc8 = length(_p.xz));
}
float _k3158 = sdc8;
return (sqrt(((dot(_p, _p) + (_ra * _ra)) - ((2.0 * _ra) * _k3158))) - _rb);
}
float f_sdSphere(in float3 _p, in float _r)
{
return (length(_p) - _r);
}
float f_sdEllipsoid(in float3 _p, in float3 _r)
{
float _k03165 = length((_p / _r));
float _k13166 = length((_p / (_r * _r)));
return ((_k03165 * (_k03165 - 1.0)) / _k13166);
}
float f_sdArc(in float2 _p, in float2 _scb, in float _ra)
{
(_p.x = abs(_p.x));
float sdc9 = {0};
if (((_scb.y * _p.x) > (_scb.x * _p.y)))
{
(sdc9 = dot(_p.xy, _scb));
}
else
{
(sdc9 = length(_p.xy));
}
float _k3175 = sdc9;
return sqrt(((dot(_p, _p) + (_ra * _ra)) - ((2.0 * _ra) * _k3175)));
}
float4 f_sdBezier(in float3 _p, in float3 _va, in float3 _vb, in float3 _vc)
{
float3 _w3181 = normalize(cross((_vc - _vb), (_va - _vb)));
float3 _u3182 = normalize((_vc - _vb));
float3 _v3183 = cross(_w3181, _u3182);
float2 _m3184 = vec2_ctor(dot((_va - _vb), _u3182), dot((_va - _vb), _v3183));
float2 _n3185 = vec2_ctor(dot((_vc - _vb), _u3182), dot((_vc - _vb), _v3183));
float3 _q3186 = vec3_ctor(dot((_p - _vb), _u3182), dot((_p - _vb), _v3183), dot((_p - _vb), _w3181));
float _mn3187 = f_det(_m3184, _n3185);
float _mq3188 = f_det(_m3184, _q3186.xy);
float _nq3189 = f_det(_n3185, _q3186.xy);
float2 _g3190 = ((((_nq3189 + _mq3188) + _mn3187) * _n3185) + (((_nq3189 + _mq3188) - _mn3187) * _m3184));
float _f3191 = ((((_nq3189 - _mq3188) + _mn3187) * ((_nq3189 - _mq3188) + _mn3187)) + ((4.0 * _mq3188) * _nq3189));
float2 _z3192 = (((0.5 * _f3191) * vec2_ctor((-_g3190.y), _g3190.x)) / dot(_g3190, _g3190));
float _t3193 = clamp((0.5 + ((0.5 * f_det((_z3192 - _q3186.xy), (_m3184 + _n3185))) / _mn3187)), 0.0, 1.0);
float2 _cp3194 = ((((_m3184 * (1.0 - _t3193)) * (1.0 - _t3193)) + ((_n3185 * _t3193) * _t3193)) - _q3186.xy);
float _d23195 = dot(_cp3194, _cp3194);
return vec4_ctor(sqrt((_d23195 + (_q3186.z * _q3186.z))), _t3193, _q3186.z, ((-sign(_f3191)) * sqrt(_d23195)));
}
float2 f_sdSegment(in float3 _p, in float3 _a, in float3 _b)
{
float3 _pa3200 = (_p - _a);
float3 _ba3201 = (_b - _a);
float _h3202 = clamp((dot(_pa3200, _ba3201) / dot(_ba3201, _ba3201)), 0.0, 1.0);
return vec2_ctor(length((_pa3200 - (_ba3201 * _h3202))), _h3202);
}
float f_sdCone(in float3 _p, in float2 _c)
{
float2 _q3216 = vec2_ctor(length(_p.xz), _p.y);
float2 _a3217 = (_q3216 - (_c * clamp((((_q3216.x * _c.x) + (_q3216.y * _c.y)) / dot(_c, _c)), 0.0, 1.0)));
float2 _b3218 = (_q3216 - (_c * vec2_ctor(clamp((_q3216.x / _c.x), 0.0, 1.0), 1.0)));
float _s3219 = (-sign(_c.y));
float2 _d3220 = min(vec2_ctor(dot(_a3217, _a3217), (_s3219 * ((_q3216.x * _c.y) - (_q3216.y * _c.x)))), vec2_ctor(dot(_b3218, _b3218), (_s3219 * (_q3216.y - _c.y))));
return ((-sqrt(_d3220.x)) * sign(_d3220.y));
}
float4 f_opElongate(in float3 _p, in float3 _h)
{
float3 _q3233 = (abs(_p) - _h);
return vec4_ctor(max(_q3233, 0.0), min(max(_q3233.x, max(_q3233.y, _q3233.z)), 0.0));
}
float2 f_iCylinderY(in float3 _ro, in float3 _rd, in float _rad)
{
float3 _oc3238 = _ro;
float _a3239 = dot(_rd.xz, _rd.xz);
float _b3240 = dot(_oc3238.xz, _rd.xz);
float _c3241 = (dot(_oc3238.xz, _oc3238.xz) - (_rad * _rad));
float _h3242 = ((_b3240 * _b3240) - (_a3239 * _c3241));
if ((_h3242 < 0.0))
{
return float2(-1.0, -1.0);
}
(_h3242 = sqrt(_h3242));
return (vec2_ctor(((-_b3240) - _h3242), ((-_b3240) + _h3242)) / _a3239);
}
float f_linearstep(in float _a, in float _b, in float _x)
{
return clamp(((_x - _a) / (_b - _a)), 0.0, 1.0);
}
float2 f_rot(in float2 _p, in float _an)
{
float _cc3258 = cos(_an);
float _ss3259 = sin(_an);
return mul(transpose(mat2_ctor(_cc3258, (-_ss3259), _ss3259, _cc3258)), _p);
}
float f_expSustainedImpulse(in float _t, in float _f, in float _k)
{
return ((smoothstep(0.0, _f, _t) * 1.1) - (0.1 * exp2(((-_k) * max((_t - _f), 0.0)))));
}
float f_noise1(const uint _tex, in float3 _x)
{
return gl_texture3DLod(_tex, ((_x + 0.5) / 32.0), 0.0).x;
}
float f_fbm1(const uint _tex, in float3 _x)
{
float _f3279 = {0.0};
(_f3279 += (0.5 * f_noise1(_tex, _x)));
(_x *= 2.01);
(_f3279 += (0.25 * f_noise1(_tex, _x)));
(_x *= 2.01);
(_f3279 += (0.125 * f_noise1(_tex, _x)));
(_x *= 2.01);
(_f3279 += (0.0625 * f_noise1(_tex, _x)));
(_f3279 = ((2.0 * _f3279) - 0.9375));
return _f3279;
}
float f_bnoise(in float _x)
{
float _i3290 = floor(_x);
float _f3291 = frac(_x);
float _s3292 = sign((frac((_x / 2.0)) - 0.5));
float _k3293 = (0.5 + (0.5 * sin(_i3290)));
return (((_s3292 * _f3291) * (_f3291 - 1.0)) * (((((16.0 * _k3293) - 4.0) * _f3291) * (_f3291 - 1.0)) - 1.0));
}
float3 f_fbm13(in float _x, in float _g)
{
float3 _n3297 = {0.0, 0.0, 0.0};
float _s3298 = {1.0};
{ for(int _i3299 = {0}; (_i3299 < 6); (_i3299++))
{
(_n3297 += (_s3298 * vec3_ctor(f_bnoise(_x), f_bnoise((_x + 13.314)), f_bnoise((_x + 31.7211)))));
(_s3298 *= _g);
(_x *= 2.01);
(_x += 0.131);
}
}
return _n3297;
}
float3x3 f_calcCamera(in float _time, inout float3 _oRo, inout float _oFl)
{
float3 _ta3306 = {0.0, -0.30000001, 0.0};
float3 _ro3307 = {-0.55629998, -0.2, 2.7442};
float _fl3308 = {1.7};
float3 _fb13309 = f_fbm13((0.15000001 * _time), 0.5);
(_ro3307.xyz += (0.0099999998 * _fb13309.xyz));
float3 _fb23310 = f_fbm13((0.33000001 * _time), 0.64999998);
(_fb23310 = ((_fb23310 * _fb23310) * sign(_fb23310)));
(_ta3306.xy += (0.0049999999 * _fb23310.xy));
float _cr3311 = (-0.0099999998 + (0.0020000001 * _fb23310.z));
float3 _ww3312 = normalize((_ta3306 - _ro3307));
float3 _uu3313 = normalize(cross(_ww3312, vec3_ctor(sin(_cr3311), cos(_cr3311), 0.0)));
float3 _vv3314 = cross(_uu3313, _ww3312);
(_oRo = _ro3307);
(_oFl = _fl3308);
return mat3_ctor(_uu3313, _vv3314, _ww3312);
}
float4 f_sdHair(in float3 _p, in float3 _pa, in float3 _pb, in float3 _pc, in float _an, inout float2 _occ_id)
{
float4 _b3322 = f_sdBezier(_p, _pa, _pb, _pc);
float2 _q3323 = f_rot(_b3322.zw, _an);
float2 _id23324 = round((_q3323 / 0.1));
(_id23324 = clamp(_id23324, float2(0.0, 0.0), float2(2.0, 1.0)));
(_q3323 -= (0.1 * _id23324));
float _id3325 = ((11.0 * _id23324.x) + (_id23324.y * 13.0));
(_q3323 += (((smoothstep(0.5, 0.80000001, _b3322.y) * 0.02) * float2(0.40000001, 1.5)) * cos(((23.0 * _b3322.y) + (_id3325 * float2(13.0, 17.0))))));
(_occ_id.x = clamp(((length(_q3323) * 8.0) - 0.2), 0.0, 1.0));
float4 _res3326 = vec4_ctor(99, _q3323, _b3322.y);
{ for(int _i3327 = {0}; (_i3327 < 3); (_i3327++))
{
float2 _tmp3328 = (_q3323 + (0.0099999998 * cos(((_id3325 + (180.0 * _b3322.y)) + vec2_ctor((2 * _i3327), (6 - (2 * _i3327)))))));
float _lt3329 = (length(_tmp3328) - 0.02);
if ((_lt3329 < _res3326.x))
{
(_occ_id.y = (_id3325 + float_ctor(_i3327)));
(_res3326.x = _lt3329);
(_res3326.yz = _tmp3328);
}
}
}
return _res3326;
}
float4 f_sdHoodie(in float3 _pos)
{
float3 _opos3332 = _pos;
(_pos.x += (((0.090000004 * sin(((3.5 * _pos.y) - 0.5))) * sin(_pos.z)) + 0.015));
(_pos.xyz += ((0.029999999 * sin((2.0 * _pos.y))) * sin((7.0 * _pos.zyx))));
float3 _hos3333 = (_pos - float3(0.0, -0.33000001, 0.15000001));
(_hos3333.x -= (0.030999999 * smoothstep(0.0, 1.0, (_opos3332.y + 0.33000001))));
(_hos3333.yz = f_rot(_hos3333.yz, 0.89999998));
float _d13334 = f_sdEllipsoid(_hos3333, vec3_ctor((0.95999998 - (_pos.y * 0.1)), 1.23, 1.5));
float _d23335 = (((0.94999999 * _pos.z) - (0.31200001 * _pos.y)) - 0.89999998);
float _d3336 = max(f_opOnion(_d13334, 0.0099999998), _d23335);
float3 _sos3337 = vec3_ctor(abs(_pos.x), _pos.yz);
float2 _se3338 = f_sdSegment(_sos3337, float3(0.18000001, -1.6, -0.30000001), float3(1.1, -1.9, 0.0));
(_d3336 = f_smin(_d3336, (_se3338.x - lerp(0.25, 0.43000001, _se3338.y)), 0.40000001));
(_d3336 = f_smin(_d3336, f_sdSphere((_sos3337 - float3(0.30000001, -2.2, 0.40000001)), 0.5), 0.2));
(_opos3332.x -= (0.02 * sin((9.0 * _opos3332.y))));
float4 _w3339 = f_opElongate((_opos3332 - float3(0.0, -1.2, 0.30000001)), float3(0.0, 0.30000001, 0.0));
(_d3336 = f_smin(_d3336, (_w3339.w + f_sdCappedTorus(vec3_ctor(_w3339.xy, (-_w3339.z)), float2(0.60000002, -0.80000001), 0.60000002, 0.02)), 0.1));
(_d3336 += (((0.0040000002 * sin((_pos.x * 90.0))) * sin((_pos.y * 90.0))) * sin((_pos.z * 90.0))));
(_d3336 -= (0.0020000001 * sin((_pos.x * 300.0))));
(_d3336 -= (0.02 * (1.0 - smoothstep(0.0, 0.039999999, abs(f_opOnion(_pos.x, 1.1))))));
(_d3336 = min(_d3336, (length(vec2_ctor(_d13334, _d23335)) - 0.015)));
return vec4_ctor(_d3336, _pos);
}
float3 f_moveHead(in float3 _pos, in float3 _an, in float _amount)
{
(_pos.y -= -1.0);
(_pos.xz = f_rot(_pos.xz, (_amount * _an.x)));
(_pos.xy = f_rot(_pos.xy, (_amount * _an.y)));
(_pos.yz = f_rot(_pos.yz, (_amount * _an.z)));
(_pos.y += -1.0);
return _pos;
}
static float3 _animData = {0, 0, 0};
static float3 _animHead = {0, 0, 0};
float4 f_map(in float3 _pos, in float _time, inout float _outMat, inout float3 _uvw)
{
(_outMat = 1.0);
(_pos.y /= 1.04);
float3 _opos3352 = {0, 0, 0};
(_opos3352 = f_moveHead(_pos, _animHead, smoothstep(-1.2, 0.2, _pos.y)));
(_pos = f_moveHead(_pos, _animHead, smoothstep(-1.4, -1.0, _pos.y)));
(_pos.x *= 1.04);
(_pos.y /= 1.02);
(_uvw = _pos);
float3 _qos3353 = vec3_ctor(abs(_pos.x), _pos.yz);
float3 _sos3354 = vec3_ctor(sqrt(((_qos3353.x * _qos3353.x) + 0.00050000002)), _pos.yz);
float _d3355 = f_sdEllipsoid((_pos - float3(0.0, 0.050000001, 0.07)), float3(0.80000001, 0.75, 0.85000002));
float3 _mos3356 = (_pos - float3(0.0, -0.38, 0.34999999));
(_mos3356.yz = f_rot(_mos3356.yz, 0.40000001));
(_mos3356.yz = f_rot(_mos3356.yz, (0.1 * _animData.z)));
float _d23357 = f_sdEllipsoid((_mos3356 - float3(0.0, -0.17, 0.16)), vec3_ctor((0.66000003 + f_sclamp(((_mos3356.y * 0.89999998) - (0.1 * _mos3356.z)), -0.30000001, 0.40000001)), (0.43000001 + f_sclamp((_mos3356.y * 0.5), -0.5, 0.2)), (0.5 + f_sclamp((_mos3356.y * 0.30000001), -0.44999999, 0.5))));
(_d23357 = f_smax(_d23357, (-f_sdEllipsoid((_mos3356 - vec3_ctor(0, 0.059999999, (0.60000002 + (0.050000001 * _animData.z)))), vec3_ctor(0.16, (0.035 + (0.050000001 * _animData.z)), 0.1))), 0.0099999998));
float4 _b3358 = f_sdBezier(vec3_ctor(abs(_mos3356.x), _mos3356.yz), float3(0.0, 0.0099999998, 0.61000001), vec3_ctor((0.093999997 + (0.0099999998 * _animData.z)), 0.015, 0.61000001), vec3_ctor((0.18000001 - (0.02 * _animData.z)), (0.059999999 + (_animData.z * 0.050000001)), (0.56999999 - (0.0060000001 * _animData.z))));
float _isLip3359 = smoothstep(0.045000002, 0.039999999, (_b3358.x + (_b3358.y * 0.029999999)));
(_d23357 = f_smin(_d23357, (_b3358.x - ((0.027000001 * (1.0 - (_b3358.y * _b3358.y))) * smoothstep(1.0, 0.40000001, _b3358.y))), 0.02));
(_d3355 = f_smin(_d3355, _d23357, 0.19));
(_d3355 = f_smin(_d3355, f_sdSphere((_qos3353 - float3(0.2, -0.33000001, 0.62)), 0.28), 0.039999999));
float3 _eos3360 = (_sos3354 - float3(0.30000001, -0.039999999, 0.69999999));
(_eos3360.xz = f_rot(_eos3360.xz, -0.2));
(_eos3360.xy = f_rot(_eos3360.xy, 0.30000001));
(_eos3360.yz = f_rot(_eos3360.yz, -0.2));
(_d23357 = f_sdEllipsoid((_eos3360 - float3(-0.050000001, -0.050000001, 0.2)), vec3_ctor(0.2, (0.14 - (0.059999999 * _animData.x)), 0.1)));
(_d3355 = f_smax(_d3355, (-_d23357), 0.15000001));
(_eos3360 = (_sos3354 - float3(0.31999999, -0.079999998, 0.80000001)));
(_eos3360.xz = f_rot(_eos3360.xz, -0.40000001));
(_d23357 = f_sdEllipsoid(_eos3360, float3(0.154, 0.11, 0.1)));
(_d3355 = f_smax(_d3355, (-_d23357), 0.050000001));
float3 _oos3361 = (_qos3353 - float3(0.25, -0.059999999, 0.41999999));
(_d23357 = f_sdSphere(_oos3361, 0.40000001));
(_oos3361.xz = f_rot(_oos3361.xz, -0.2));
(_oos3361.xy = f_rot(_oos3361.xy, 0.2));
float3 _tos3362 = _oos3361;
(_oos3361.yz = f_rot(_oos3361.yz, (-0.60000002 + (0.57999998 * _animData.x))));
(_tos3362 = (_tos3362 - vec3_ctor(-0.02, 0.059999999, (0.2 + (0.02 * _animData.x)))));
(_tos3362.yz = f_rot(_tos3362.yz, 0.80000001));
(_tos3362.xy = f_rot(_tos3362.xy, -0.2));
(_d3355 = f_smin(_d3355, f_sdTorus(_tos3362, 0.28999999, 0.0099999998), 0.029999999));
(_eos3360 = (_qos3353 - float3(0.33000001, -0.07, 0.52999997)));
(_eos3360.xy = f_rot(_eos3360.xy, 0.2));
(_eos3360.yz = f_rot(_eos3360.yz, (0.34999999 - (0.25 * _animData.x))));
(_d23357 = f_smax((_d23357 - 0.0049999999), (-max((_oos3361.y + 0.097999997), ((-_eos3360.y) - 0.025))), 0.02));
(_d3355 = f_smin(_d3355, _d23357, 0.012));
(_oos3361.x -= 0.0099999998);
float _xx3363 = clamp((_oos3361.x + 0.17), 0.0, 1.0);
float _ra3364 = (0.34999999 + (((0.1 * sqrt((_xx3363 / 0.2))) * (1.0 - smoothstep(0.30000001, 0.40000001, _xx3363))) * (0.60000002 + (0.40000001 * sin((_xx3363 * 256.0))))));
float _rc3365 = (0.18000001 / (1.0 - (0.69999999 * smoothstep(0.15000001, 0.5, _animData.x))));
(_oos3361.y -= (-0.18000001 - ((_rc3365 - 0.18000001) / 1.8)));
(_d23357 = ((0.55555558 * f_sdArc((_oos3361.xy * float2(1.0, 1.8)), float2(0.89999998, 0.43588996), _rc3365)) - 0.001));
float _deyelashes3366 = (max(_d23357, (length(_oos3361.xz) - _ra3364)) - 0.003);
(_eos3360 = (_pos - vec3_ctor(0.0, (-0.079000004 + (_animData.y * 0.0049999999)), 0.86000001)));
(_eos3360.yz = f_rot(_eos3360.yz, -0.23));
float _h3367 = smoothstep(0.0, 0.25999999, (-_eos3360.y));
(_d23357 = ((f_sdCone((_eos3360 - float3(0.0, -0.02, 0.0)), float2(0.029999999, -0.25)) - (0.039999999 * _h3367)) - 0.0099999998));
(_eos3360.x = sqrt(((_eos3360.x * _eos3360.x) + 0.001)));
(_d23357 = f_smin(_d23357, f_sdSphere((_eos3360 - float3(0.0, -0.25, 0.037)), 0.059999999), 0.07));
(_d23357 = f_smin(_d23357, f_sdSphere((_eos3360 - float3(0.1, -0.27000001, 0.029999999)), 0.039999999), 0.07));
(_d23357 = f_smin(_d23357, f_sdSphere((_eos3360 - float3(0.0, -0.31999999, 0.050000001)), 0.025), 0.039999999));
(_d23357 = f_smax(_d23357, (-f_sdSphere((_eos3360 - float3(0.07, -0.31, 0.037999999)), 0.02)), 0.035));
(_d3355 = f_smin(_d3355, _d23357, (0.050000001 - (0.029999999 * _h3367))));
(_eos3360 = (_pos - vec3_ctor(0.0, ((-0.38 + (_animData.y * 0.003)) + (0.0099999998 * _animData.z)), 0.70999998)));
(_tos3362 = (_eos3360 - float3(0.0, -0.13, 0.059999999)));
(_tos3362.yz = f_rot(_tos3362.yz, 0.2));
float _dTeeth3368 = f_sdTorus(_tos3362, 0.15000001, 0.015);
(_eos3360.yz = f_rot(_eos3360.yz, -0.5));
(_eos3360.x /= 1.04);
(_d23357 = (f_sdCone((_eos3360 - float3(0.0, 0.0, 0.029999999)), float2(0.14, -0.2)) - 0.029999999));
(_d23357 = max(_d23357, (-(_eos3360.z - 0.029999999))));
(_d3355 = f_smin(_d3355, _d23357, 0.050000001));
(_eos3360.x = abs(_eos3360.x));
(_b3358 = f_sdBezier(_eos3360, float3(0.0, -0.22, 0.17), float3(0.079999998, -0.22, 0.17), vec3_ctor((0.17 - (0.02 * _animData.z)), (-0.23999999 - (0.0099999998 * _animData.z)), 0.079999998)));
(_d23357 = (length((_b3358.zw / float2(0.5, 1.0))) - (0.029999999 * clamp((1.0 - (_b3358.y * _b3358.y)), 0.0, 1.0))));
(_d3355 = f_smin(_d3355, _d23357, 0.02));
(_isLip3359 = max(_isLip3359, (smoothstep(0.029999999, 0.0049999999, abs(((_b3358.z + 0.015) + (abs(_eos3360.x) * 0.039999999)))) - smoothstep(0.44999999, 0.47, (_eos3360.x - (_eos3360.y * 1.15))))));
float2 _se3369 = f_sdSegment(_pos, float3(0.0, -0.44999999, 1.01), float3(0.0, -0.47, 1.09));
(_d23357 = ((_se3369.x - 0.029999999) - (0.059999999 * _se3369.y)));
(_d3355 = f_smax(_d3355, (-_d23357), 0.039999999));
(_isLip3359 *= smoothstep(0.0099999998, 0.029999999, _d23357));
(_se3369 = f_sdSegment(_pos, float3(0.0, -0.64999998, 0.0), float3(0.0, -1.7, -0.1)));
(_d23357 = (_se3369.x - 0.38));
(_se3369 = f_sdSegment(_sos3354, float3(0.0, -1.55, 0.0), float3(0.60000002, -1.65, 0.0)));
(_d23357 = f_smin(_d23357, (_se3369.x - 0.20999999), 0.1));
(_d3355 = f_smin(_d3355, _d23357, 0.40000001));
float4 _res3370 = vec4_ctor(_d3355, _isLip3359, 0, 0);
if ((_deyelashes3366 < _res3370.x))
{
(_res3370.x = (_deyelashes3366 * 0.80000001));
(_res3370.yzw = float3(0.0, 1.0, 0.0));
}
if ((_dTeeth3368 < _res3370.x))
{
(_res3370.x = _dTeeth3368);
(_outMat = 5.0);
}
(_pos.x /= 1.05);
(_eos3360 = (_qos3353 - float3(0.25, -0.059999999, 0.41999999)));
(_d23357 = f_sdSphere(_eos3360, 0.40000001));
if ((_d23357 < _res3370.x))
{
(_res3370.x = _d23357);
(_outMat = 2.0);
(_uvw = _pos);
}
{
float2 _occ_id3371 = {0, 0};
float2 _tmp3372 = {0, 0};
(_qos3353 = _pos);
(_qos3353.x = abs(_pos.x));
float4 _pres3373 = f_sdHair(_pos, float3(-0.30000001, 0.55000001, 0.80000001), float3(0.94999999, 0.69999999, 0.85000002), float3(0.40000001, -1.45, 0.94999999), -0.89999998, _occ_id3371);
float4 _pres23374 = f_sdHair(_pos, float3(-0.40000001, 0.60000002, 0.55000001), float3(-1.0, 0.40000001, 0.2), float3(-0.60000002, -1.4, 0.69999999), 0.60000002, _tmp3372);
if ((_pres23374.x < _pres3373.x))
{
(_pres3373 = _pres23374);
(_occ_id3371 = _tmp3372);
(_occ_id3371.y += 40.0);
}
(_pres23374 = f_sdHair(_qos3353, float3(0.40000001, 0.69999999, 0.40000001), float3(1.0, 0.5, 0.44999999), float3(0.40000001, -1.45, 0.55000001), -0.2, _tmp3372));
if ((_pres23374.x < _pres3373.x))
{
(_pres3373 = _pres23374);
(_occ_id3371 = _tmp3372);
(_occ_id3371.y += 80.0);
}
(_pres3373.x *= 0.80000001);
if ((_pres3373.x < _res3370.x))
{
(_res3370 = vec4_ctor(_pres3373.x, _occ_id3371.y, 0.0, _occ_id3371.x));
(_uvw = _pres3373.yzw);
(_outMat = 4.0);
}
}
float4 _tmp3375 = f_sdHoodie(_opos3352);
if ((_tmp3375.x < _res3370.x))
{
(_res3370.x = _tmp3375.x);
(_outMat = 3.0);
(_uvw = _tmp3375.yzw);
}
return _res3370;
}
float4 f_mapD(in float3 _pos, in float _time)
{
float _matID3379 = {0};
float3 _uvw3380 = {0, 0, 0};
float4 _h3381 = f_map(_pos, _time, _matID3379, _uvw3380);
if ((_matID3379 < 1.5))
{
float _d3382 = f_fbm1(_iChannel0, (120.0 * _uvw3380));
(_h3381.x += ((0.0015 * _d3382) * _d3382));
}
else
{
if (((_matID3379 > 3.5) && (_matID3379 < 4.5)))
{
float _te3383 = gl_texture2D(_iChannel2, vec2_ctor((0.25 * atan_emu(_uvw3380.x, _uvw3380.y)), (8.0 * _uvw3380.z))).x;
(_h3381.x -= (0.02 * _te3383));
}
}
return _h3381;
}
float3 f_calcNormal(in float3 _pos, in float _time)
{
float4 _n3388 = {0.0, 0.0, 0.0, 0.0};
{LOOP for(int _i3389 = min(_iFrame, 0); (_i3389 < 4); (_i3389++))
{
float4 _s3390 = vec4_ctor(_pos, 0.0);
int sdd5 = _i3389;
float sdd6 = dyn_index_vec4_float4(_s3390, sdd5);
(sdd6 += 0.001);
dyn_index_write_vec4_float4(_s3390, sdd5, sdd6);
int sdd7 = _i3389;
float sdd8 = dyn_index_vec4_float4(_n3388, sdd7);
(sdd8 = f_mapD(_s3390.xyz, _time).x);
dyn_index_write_vec4_float4(_n3388, sdd7, sdd8);
}
}
return normalize((_n3388.xyz - _n3388.w));
}
float f_calcSoftshadow(in float3 _ro, in float3 _rd, in float _mint, in float _tmax, in float _time, in float _k)
{
float2 _sph3400 = f_iCylinderY(_ro, _rd, 1.5);
(_tmax = min(_tmax, _sph3400.y));
float _res3401 = {1.0};
float _t3402 = _mint;
{ for(int _i3403 = {0}; (_i3403 < 128); (_i3403++))
{
float _kk3404 = {0};
float3 _kk23405 = {0, 0, 0};
float _h3406 = f_map((_ro + (_rd * _t3402)), _time, _kk3404, _kk23405).x;
(_res3401 = min(_res3401, ((_k * _h3406) / _t3402)));
(_t3402 += clamp(_h3406, 0.0049999999, 0.1));
if (((_res3401 < 0.0020000001) || (_t3402 > _tmax)))
{
break;
}
}
}
return max(_res3401, 0.0);
}
float f_calcOcclusion(in float3 _pos, in float3 _nor, in float _time)
{
float _kk3411 = {0};
float3 _kk23412 = {0, 0, 0};
float _ao3413 = {0.0};
float _off3414 = gl_texture2DLod(_iChannel3, (gl_FragCoord.xy / 256.0), 0.0).x;
float4 _k3415 = (float4(0.7012912, 0.3941462, 0.82945848, 0.109841) + _off3414);
{ for(int _i3416 = min(_iFrame, 0); (_i3416 < 16); (_i3416++))
{
(_k3415 = frac((_k3415 + float4(0.85667491, 0.73389196, 0.62870681, 0.53859735))));
float3 _ap3417 = normalize((-1.0 + (2.0 * _k3415.xyz)));
float _h3418 = (_k3415.w * 0.1);
(_ap3417 = ((_nor + _ap3417) * _h3418));
float _d3419 = f_map((_pos + _ap3417), _time, _kk3411, _kk23412).x;
(_ao3413 += max(0.0, (_h3418 - _d3419)));
if ((_ao3413 > 16.0))
{
break;
}
}
}
(_ao3413 /= 16.0);
return clamp((1.0 - (_ao3413 * 24.0)), 0.0, 1.0);
}
float2 f_intersect(in float3 _ro, in float3 _rd, in float _tmax, in float _time, inout float3 _cma, inout float3 _uvw)
{
(_cma = float3(0.0, 0.0, 0.0));
(_uvw = float3(0.0, 0.0, 0.0));
float _matID3427 = {-1.0};
float _t3428 = {1.0};
float2 _sph3429 = f_iCylinderY(_ro, _rd, 1.5);
if ((_sph3429.y < 0.0))
{
return float2(-1.0, -1.0);
}
(_tmax = min(_tmax, _sph3429.y));
(_t3428 = max(1.0, _sph3429.x));
{ for(int _i3430 = {0}; (_i3430 < 256); (_i3430++))
{
float3 _pos3431 = (_ro + (_t3428 * _rd));
float _tmp3432 = {0};
float4 _h3433 = f_map(_pos3431, _time, _tmp3432, _uvw);
if ((_h3433.x < 0.001))
{
(_cma = _h3433.yzw);
(_matID3427 = _tmp3432);
break;
}
(_t3428 += (_h3433.x * 0.94999999));
if ((_t3428 > _tmax))
{
break;
}
}
}
return vec2_ctor(_t3428, _matID3427);
}
float3 f_sdif(in float _ndl, in float _ir)
{
float _pndl3437 = clamp(_ndl, 0.0, 1.0);
float _nndl3438 = clamp((-_ndl), 0.0, 1.0);
float sdd9 = clamp(((_ir * 0.75) - _nndl3438), 0.0, 1.0);
return (vec3_ctor(_pndl3437) + (float3(0.69999999, 0.07, 0.0069999998) * (sdd9 * sdd9)));
}
float f_animEye(in float _time)
{
float _t3442 = mod_emu((_time - 0.31), 6.0999999);
float _q3443 = frac(((_time - 0.31) / 12.2));
float sdca = {0};
if ((_q3443 > 0.5))
{
(sdca = 1.0);
}
else
{
(sdca = 0.0);
}
float _s3444 = sdca;
float sdcb = {0};
if ((_t3442 < 0.15000001))
{
(sdcb = (1.0 - _s3444));
}
else
{
(sdcb = _s3444);
}
return sdcb;
}
float3 f_renderGirl(in float2 _p, in float3 _ro, in float3 _rd, in float _tmax, in float3 _col, in float _time)
{
float3 _cma3452 = {0, 0, 0};
float3 _uvw3453 = {0, 0, 0};
float2 _tm3454 = f_intersect(_ro, _rd, _tmax, _time, _cma3452, _uvw3453);
FLATTEN if ((_tm3454.y > 0.0))
{
float3 _pos3455 = (_ro + (_tm3454.x * _rd));
float3 _nor3456 = f_calcNormal(_pos3455, _time);
float _ks3457 = {1.0};
float _se3458 = {16.0};
float _tinterShadow3459 = {0.0};
float _sss3460 = {0.0};
float _focc3461 = {1.0};
if ((_tm3454.y < 1.5))
{
float3 _qos3462 = vec3_ctor(abs(_uvw3453.x), _uvw3453.yz);
(_col = lerp(float3(0.22499999, 0.15000001, 0.12), float3(0.23999999, 0.1, 0.066), (smoothstep(0.40000001, 0.0, length((_qos3462.xy - float2(0.41999999, -0.30000001)))) + smoothstep(0.15000001, 0.0, length(((_qos3462.xy - float2(0.0, -0.28999999)) / float2(1.4, 1.0)))))));
(_col -= (0.029999999 * smoothstep(0.13, 0.0, length(((_qos3462.xy - float2(0.0, -0.49000001)) / float2(2.0, 1.0))))));
(_col = lerp(_col, float3(0.14, 0.059999999, 0.1), (_cma3452.x * step(-0.69999999, _qos3462.y))));
(_col = lerp(_col, float3(0.024, 0.012, 0.012), (0.89999998 * _cma3452.y)));
(_uvw3453.y += ((0.025 * _animData.x) * smoothstep(0.30000001, 0.1, length((_uvw3453 - float3(0.0, 0.1, 1.0))))));
(_uvw3453.y -= ((0.0049999999 * _animData.y) * smoothstep(0.090000004, 0.0, abs((length(((_uvw3453.xy - float2(0.0, -0.38)) / float2(2.5, 1.0))) - 0.12)))));
float2 _ti3463 = floor((9.0 + (_uvw3453.xy / 0.039999999)));
float2 _uv3464 = (frac((_uvw3453.xy / 0.039999999)) - 0.5);
float _te3465 = frac((111.0 * sin(((1111.0 * _ti3463.x) + (1331.0 * _ti3463.y)))));
(_te3465 = (smoothstep(0.89999998, 1.0, _te3465) * exp(((-dot(_uv3464, _uv3464)) * 24.0))));
(_col *= lerp(float3(1.1, 1.1, 1.1), float3(0.80000001, 0.60000002, 0.40000001), _te3465));
(_ks3457 = (0.5 + (4.0 * gl_texture2D(_iChannel3, (_uvw3453.xy * 1.1)).x)));
(_se3458 = 12.0);
(_ks3457 *= 0.5);
(_tinterShadow3459 = 1.0);
(_sss3460 = 1.0);
(_ks3457 *= (1.0 + _cma3452.x));
(_col *= (1.0 - smoothstep(0.47999999, 0.50999999, _uvw3453.y)));
float _d23466 = f_sdEllipsoid((_qos3462 - float3(0.25, -0.029999999, 0.43000001)), float3(0.37, 0.41999999, 0.40000001));
(_col = lerp(_col, float3(0.059999999, 0.024, 0.059999999), (1.0 - smoothstep(0.0, 0.029999999, _d23466))));
{
float4 _be3467 = f_sdBezier(_qos3462, vec3_ctor((0.16 + (0.0099999998 * _animData.x)), (0.11 - (0.02 * _animData.x)), 0.88999999), vec3_ctor(0.37, (0.18000001 - (0.0049999999 * _animData.x)), (0.81999999 + (0.0049999999 * _animData.x))), float3(0.52999997, 0.15000001, 0.69));
float _ra3468 = (0.0049999999 + (0.0099999998 * sqrt((1.0 - _be3467.y))));
float _dd3469 = (1.0 + (0.050000001 * ((0.69999999 * sin((((sin((_qos3462.x * 3.0)) / 3.0) - (0.5 * _qos3462.y)) * 350.0))) + (0.30000001 * sin((((_qos3462.x - (0.80000001 * _qos3462.y)) * 250.0) + 1.0))))));
float _d3470 = (_be3467.x - (_ra3468 * _dd3469));
float _mask3471 = (1.0 - smoothstep(-0.0049999999, 0.0099999998, _d3470));
(_col = lerp(_col, float3(0.039999999, 0.02, 0.02), (_mask3471 * _dd3469)));
}
float sdda = (1.0 - smoothstep(-0.40000001, 1.0, _uvw3453.y));
(_focc3461 = (0.2 + (0.80000001 * (sdda * sdda))));
(_focc3461 *= (0.5 + (0.5 * smoothstep(-1.5, -0.75, _uvw3453.y))));
(_focc3461 *= (1.0 - smoothstep(0.40000001, 0.75, abs(_uvw3453.x))));
(_focc3461 *= (1.0 - (0.40000001 * smoothstep(0.2, 0.5, _uvw3453.y))));
(_focc3461 *= (1.0 - smoothstep(1.0, 1.3, ((1.7 * _uvw3453.y) - _uvw3453.x))));
}
else
{
if ((_tm3454.y < 2.5))
{
(_sss3460 = 1.0);
float3 _qos3472 = vec3_ctor(abs(_uvw3453.x), _uvw3453.yz);
float _ss3473 = sign(_uvw3453.x);
float _dt3474 = floor((_time * 1.1));
float _ft3475 = frac((_time * 1.1));
float2 _da03476 = (sin((1.7 * (_dt3474 + 0.0))) + sin(((2.3 * (_dt3474 + 0.0)) + float2(1.0, 2.0))));
float2 _da13477 = (sin((1.7 * (_dt3474 + 1.0))) + sin(((2.3 * (_dt3474 + 1.0)) + float2(1.0, 2.0))));
float2 _da3478 = lerp(_da03476, _da13477, smoothstep(0.89999998, 1.0, _ft3475));
float _gg3479 = f_animEye(_time);
(_da3478 *= (1.0 + (0.5 * _gg3479)));
(_qos3472.yz = f_rot(_qos3472.yz, ((_da3478.y * 0.0040000002) - 0.0099999998)));
(_qos3472.xz = f_rot(_qos3472.xz, ((((_da3478.x * 0.0040000002) * _ss3473) - ((_gg3479 * _ss3473) * (0.029999999 - (step(0.0, _ss3473) * 0.014)))) + 0.02)));
float3 _eos3480 = (_qos3472 - vec3_ctor(0.31, (-0.055 - (0.029999999 * _animData.x)), 0.44999999));
float _r3481 = (length(_eos3480.xy) + 0.0049999999);
float _a3482 = atan_emu(_eos3480.y, (_ss3473 * _eos3480.x));
float3 _iris3483 = {0.090000004, 0.031500001, 0.0135};
(_iris3483 += ((_iris3483 * 3.0) * (1.0 - smoothstep(0.0, 1.0, abs(((_a3482 + 3.1415901) - 2.5))))));
(_iris3483 *= (0.34999999 + (0.69999999 * gl_texture2D(_iChannel2, vec2_ctor(_r3481, (_a3482 / 6.2831001))).x)));
(_col = float3(0.41999999, 0.41999999, 0.41999999));
(_col *= (0.1 + (0.89999998 * smoothstep(0.1, 0.114, _r3481))));
(_col = lerp(_col, _iris3483, (1.0 - smoothstep(0.094999999, 0.1, _r3481))));
(_col *= smoothstep(0.050000001, 0.07, _r3481));
float _edis3484 = length(((vec2_ctor(abs(_uvw3453.x), _uvw3453.y) - float2(0.31, -0.07)) / float2(1.3, 1.0)));
(_col *= lerp(float3(1.0, 1.0, 1.0), float3(0.40000001, 0.2, 0.1), f_linearstep(0.07, 0.16, _edis3484)));
(_qos3472 = vec3_ctor(abs(_uvw3453.x), _uvw3453.yz));
(_col += ((0.5 - (_gg3479 * 0.30000001)) * (1.0 - smoothstep(0.0, 0.02, length((_qos3472.xy - vec2_ctor((0.28999999 - (0.050000001 * _ss3473)), 0.0)))))));
(_se3458 = 128.0);
float sddb = (1.0 - smoothstep(-0.40000001, 1.0, _uvw3453.y));
(_focc3461 = (0.2 + (0.80000001 * (sddb * sddb))));
(_focc3461 *= (1.0 - f_linearstep(0.1, 0.17, _edis3484)));
}
else
{
if ((_tm3454.y < 3.5))
{
(_sss3460 = 0.0);
(_col = vec3_ctor((0.81 * gl_texture3D(_iChannel0, (_uvw3453 * 6.0)).x)));
(_ks3457 *= 2.0);
if ((abs(_uvw3453.x) < 0.66000003))
{
float _par3485 = length((_uvw3453.yz - float2(-1.05, 0.64999998)));
(_col *= lerp(float3(1.0, 1.0, 1.0), float3(0.42000002, 0.14, 0.56), (1.0 - smoothstep(0.1, 0.11, _par3485))));
(_col *= smoothstep(0.0049999999, 0.0099999998, abs((_par3485 - 0.105))));
}
(_focc3461 = lerp(1.0, (0.029999999 + (0.97000003 * smoothstep(-0.15000001, 1.7, _uvw3453.z))), (smoothstep(-1.6, -1.3, _uvw3453.y) * (1.0 - clamp(dot(_nor3456.xz, normalize(_uvw3453.xz)), 0.0, 1.0)))));
}
else
{
if ((_tm3454.y < 4.5))
{
(_sss3460 = 0.0);
float3 sdcc = {0, 0, 0};
if ((sin(_cma3452.x) > 0.69999999))
{
(sdcc = float3(0.044999998, 0.015, 0.075000003));
}
else
{
(sdcc = float3(0.016000001, 0.0080000004, 0.0040000002));
}
(_col = sdcc);
(_ks3457 *= (0.75 + (_cma3452.z * 18.0)));
float _te3486 = gl_texture2D(_iChannel2, vec2_ctor((0.25 * atan_emu(_uvw3453.x, _uvw3453.y)), (8.0 * _uvw3453.z))).x;
(_col *= (2.0 * _te3486));
(_ks3457 *= (1.5 * _te3486));
(_focc3461 = (1.0 - smoothstep(-0.40000001, 0.80000001, _uvw3453.y)));
(_focc3461 *= (1.0 - (0.94999999 * smoothstep(-1.2, -0.2, (-_uvw3453.z)))));
(_focc3461 *= (0.5 + (_cma3452.z * 12.0)));
}
else
{
if ((_tm3454.y < 5.5))
{
(_sss3460 = 1.0);
(_col = float3(0.30000001, 0.30000001, 0.30000001));
(_ks3457 *= 1.5);
}
}
}
}
}
float _fre3487 = clamp((1.0 + dot(_nor3456, _rd)), 0.0, 1.0);
float _occ3488 = (_focc3461 * f_calcOcclusion(_pos3455, _nor3456, _time));
float3 _lin3489 = {0.0, 0.0, 0.0};
float _nma3490 = {0.0};
if ((_tm3454.y < 1.5))
{
(_nma3490 = (1.0 - smoothstep(0.0, 0.12, length(((_uvw3453.xy - float2(0.0, -0.37)) / float2(2.4000001, 0.69999999))))));
}
float3 _lig3491 = {0.56999999, 0.46000001, 0.68000001};
float3 _hal3492 = normalize((_lig3491 - _rd));
float _dif3493 = clamp(dot(_nor3456, _lig3491), 0.0, 1.0);
float _sha3494 = f_calcSoftshadow((_pos3455 + (_nor3456 * 0.0020000001)), _lig3491, 9.9999997e-05, 2.0, _time, 5.0);
float sddc = clamp((1.0 - dot(_hal3492, (-_rd))), 0.0, 1.0);
float _spe3495 = (((((2.0 * _ks3457) * pow(clamp(dot(_nor3456, _hal3492), 0.0, 1.0), _se3458)) * _dif3493) * _sha3494) * (0.039999999 + (0.95999998 * ((((sddc * sddc) * sddc) * sddc) * sddc))));
float3 _cocc3496 = lerp(vec3_ctor(_occ3488), vec3_ctor((0.1 + (0.89999998 * _occ3488)), ((0.89999998 * _occ3488) + ((0.1 * _occ3488) * _occ3488)), ((0.80000001 * _occ3488) + ((0.2 * _occ3488) * _occ3488))), _tinterShadow3459);
(_cocc3496 = lerp(_cocc3496, float3(1.0, 0.30000001, 0.0), _nma3490));
(_sha3494 = lerp(_sha3494, max(_sha3494, 0.30000001), _nma3490));
float3 _amb3497 = (_cocc3496 * (0.55000001 + (0.44999999 * _nor3456.y)));
float _bou3498 = clamp((0.30000001 - (0.69999999 * _nor3456.x)), 0.0, 1.0);
(_lin3489 += ((float3(0.64999998, 1.05, 2.0) * _amb3497) * 1.15));
(_lin3489 += ((float3(2.4000001, 2.0999999, 1.8000001) * f_sdif(dot(_nor3456, _lig3491), ((0.5 + (0.30000001 * _nma3490)) + ((0.2 * (1.0 - _occ3488)) * _tinterShadow3459)))) * lerp(vec3_ctor(_sha3494), vec3_ctor(_sha3494, ((0.2 * _sha3494) + ((0.69999999 * _sha3494) * _sha3494)), ((0.2 * _sha3494) + ((0.69999999 * _sha3494) * _sha3494))), _tinterShadow3459)));
(_lin3489 += (((((float3(1.0, 0.30000001, 0.1) * _sss3460) * _fre3487) * 0.60000002) * (0.5 + (((0.5 * _dif3493) * _sha3494) * _amb3497))) * (0.1 + (0.89999998 * _focc3461))));
(_lin3489 += (((float3(1.4, 0.69999999, 0.34999999) * _bou3498) * _occ3488) * _col));
(_col = (((_lin3489 * _col) + _spe3495) + ((((_fre3487 * _fre3487) * _fre3487) * 0.1) * _occ3488)));
(_col *= 1.1);
}
return _col;
}
float f_animTurn(in float _time)
{
float _t3502 = mod_emu(_time, 12.2);
float3 sdcd = {0, 0, 0};
if ((_t3502 < 6.0999999))
{
(sdcd = float3(0.0, 0.0, 1.0));
}
else
{
(sdcd = float3(6.0999999, 1.0, -1.0));
}
float3 _p3503 = sdcd;
return (_p3503.y + (_p3503.z * f_expSustainedImpulse((_t3502 - _p3503.x), 1.0, 10.0)));
}
float f_animBlink(in float _time, in float _smo)
{
float _t3508 = mod_emu((_time - 0.31), 6.0999999);
float _blink3509 = (smoothstep(0.0, 0.1, _t3508) - smoothstep(0.18000001, 0.40000001, _t3508));
float _tt3510 = mod_emu((1.0 + _time), 3.0);
(_blink3509 = max(_blink3509, (smoothstep(0.0, (0.07 + (0.07 * _smo)), _tt3510) - smoothstep((0.1 + (0.039999999 * _smo)), (0.34999999 + (0.30000001 * _smo)), _tt3510))));
float _blinkBase3511 = (0.039999999 * (0.5 + (0.5 * sin(_time))));
(_blink3509 = lerp(_blinkBase3511, 1.0, _blink3509));
float _down3512 = {0.15000001};
return (_down3512 + ((1.0 - _down3512) * _blink3509));
}
void f_mainImage_float4(inout float4 _fragColor, in float2 _fragCoord)
{
float3 _tot3516 = {0.0, 0.0, 0.0};
float2 _p3517 = (((-_iResolution.xy) + (2.0 * _fragCoord)) / _iResolution.y);
float _time3518 = _iTime;
(_time3518 += 2.0);
float3 _ro3519 = {0, 0, 0};
float _fl3520 = {0};
float3x3 _ca3521 = f_calcCamera(_time3518, _ro3519, _fl3520);
float3 _rd3522 = mul(transpose(_ca3521), normalize(vec3_ctor(((_p3517 - float2(-0.51999998, 0.12)) / 1.1), _fl3520)));
float _turn3523 = f_animTurn(_time3518);
(_animData.x = f_animBlink(_time3518, 0.0));
(_animData.y = f_animBlink((_time3518 - 0.02), 1.0));
(_animData.z = ((-0.25 + ((0.2 * (1.0 - _turn3523)) * smoothstep(-0.30000001, 0.89999998, sin((_time3518 * 1.1))))) + (0.050000001 * cos((_time3518 * 2.7)))));
(_animHead = vec3_ctor(sin((_time3518 * 0.5)), sin((_time3518 * 0.30000001)), (-cos((_time3518 * 0.2)))));
(_animHead = ((_animHead * _animHead) * _animHead));
(_animHead.x = ((-0.025 * _animHead.x) + (0.2 * (0.69999999 + (0.30000001 * _turn3523)))));
(_animHead.y = (0.1 + (((0.02 * _animHead.y) * _animHead.y) * _animHead.y)));
(_animHead.z = ((-0.029999999 * (0.5 + (0.5 * _animHead.z))) - ((1.0 - _turn3523) * 0.050000001)));
float4 _tmp3524 = gl_texture2DFetch(_iChannel1, ivec2_ctor(_fragCoord), 0);
float3 _col3525 = _tmp3524.xyz;
float _tmin3526 = _tmp3524.w;
FLATTEN if ((((((_p3517.x * 1.4) + _p3517.y) < 0.80000001) && ((((-_p3517.x) * 4.5) + _p3517.y) < 6.5)) && (_p3517.x < 0.47999999)))
{
(_col3525 = f_renderGirl(_p3517, _ro3519, _rd3522, _tmin3526, _col3525, _time3518));
}
(_col3525 = pow(_col3525, float3(0.45449999, 0.45449999, 0.45449999)));
(_tot3516 += _col3525);
(_tot3516 = ((3.8 * _tot3516) / (3.0 + dot(_tot3516, float3(0.333, 0.333, 0.333)))));
float2 _q3527 = (_fragCoord / _iResolution.xy);
(_tot3516 *= (0.5 + (0.5 * pow(((((16.0 * _q3527.x) * _q3527.y) * (1.0 - _q3527.x)) * (1.0 - _q3527.y)), 0.15000001))));
(_tot3516 = ((_tot3516 * float3(1.02, 1.0, 0.99000001)) + float3(0.0, 0.0, 0.045000002)));
(_fragColor = vec4_ctor(_tot3516, 1.0));
}

// INITIAL HLSL END


// COMPILER INPUT HLSL BEGIN

struct PS_INPUT
{
    float4 dx_Position : SV_Position;
    float4 gl_Position : TEXCOORD0;
    float4 gl_FragCoord : TEXCOORD1;
};

#pragma warning( disable: 3556 3571 )
float float_ctor(int x0)
{
    return float(x0);
}
float2 vec2_ctor(float x0, float x1)
{
    return float2(x0, x1);
}
float2 vec2_ctor(int x0, int x1)
{
    return float2(x0, x1);
}
float2x2 mat2_ctor(float x0, float x1, float x2, float x3)
{
    return float2x2(x0, x1, x2, x3);
}
float3 vec3_ctor(float x0)
{
    return float3(x0, x0, x0);
}
float3 vec3_ctor(float x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
float3 vec3_ctor(float x0, float2 x1)
{
    return float3(x0, x1);
}
float3 vec3_ctor(float2 x0, float x1)
{
    return float3(x0, x1);
}
float3 vec3_ctor(int x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
float3x3 mat3_ctor(float3 x0, float3 x1, float3 x2)
{
    return float3x3(x0, x1, x2);
}
float4 vec4_ctor(float x0, float x1, float x2, float x3)
{
    return float4(x0, x1, x2, x3);
}
float4 vec4_ctor(float x0, float x1, int x2, int x3)
{
    return float4(x0, x1, x2, x3);
}
float4 vec4_ctor(float x0, float3 x1)
{
    return float4(x0, x1);
}
float4 vec4_ctor(float3 x0, float x1)
{
    return float4(x0, x1);
}
float4 vec4_ctor(int x0, float2 x1, float x2)
{
    return float4(x0, x1, x2);
}
int2 ivec2_ctor(float2 x0)
{
    return int2(x0);
}
// Uniforms

uniform float3 _iResolution : register(c0);
uniform float _iTime : register(c1);
uniform int _iFrame : register(c2);
static const uint _iChannel1 = 0;
static const uint _iChannel2 = 1;
static const uint _iChannel3 = 2;
uniform Texture2D textures2D[3] : register(t0);
uniform SamplerState samplers2D[3] : register(s0);
static const uint _iChannel0 = 3;
static const uint textureIndexOffset3D = 3;
static const uint samplerIndexOffset3D = 3;
uniform Texture3D textures3D[1] : register(t3);
uniform SamplerState samplers3D[1] : register(s3);
#ifdef ANGLE_ENABLE_LOOP_FLATTEN
#define LOOP [loop]
#define FLATTEN [flatten]
#else
#define LOOP
#define FLATTEN
#endif

#define ATOMIC_COUNTER_ARRAY_STRIDE 4

// Varyings

static float4 out_shadertoy_out_color = {0, 0, 0, 0};
static float4 gl_FragCoord = float4(0, 0, 0, 0);

cbuffer DriverConstants : register(b1)
{
    float4 dx_ViewCoords : packoffset(c1);
    float3 dx_DepthFront : packoffset(c2);
    float2 dx_ViewScale : packoffset(c3);
    struct SamplerMetadata
    {
        int baseLevel;
        int internalFormatBits;
        int wrapModes;
        int padding;
        int4 intBorderColor;
    };
    SamplerMetadata samplerMetadata[4] : packoffset(c4);
};

float4 gl_texture2D(uint samplerIndex, float2 t)
{
    return textures2D[samplerIndex].Sample(samplers2D[samplerIndex], float2(t.x, t.y));
}

float4 gl_texture2DLod(uint samplerIndex, float2 t, float lod)
{
    return textures2D[samplerIndex].SampleLevel(samplers2D[samplerIndex], float2(t.x, t.y), lod);
}

float4 gl_texture2DFetch(uint samplerIndex, int2 t, int mip)
{
    return textures2D[samplerIndex].Load(int3(t.x, t.y, mip));
}

float4 gl_texture3D(uint samplerIndex, float3 t)
{
    const uint textureIndex = samplerIndex - textureIndexOffset3D;
    const uint samplerArrayIndex = samplerIndex - samplerIndexOffset3D;
    return textures3D[textureIndex].Sample(samplers3D[samplerArrayIndex], float3(t.x, t.y, t.z));
}

float4 gl_texture3DLod(uint samplerIndex, float3 t, float lod)
{
    const uint textureIndex = samplerIndex - textureIndexOffset3D;
    const uint samplerArrayIndex = samplerIndex - samplerIndexOffset3D;
    return textures3D[textureIndex].SampleLevel(samplers3D[samplerArrayIndex], float3(t.x, t.y, t.z), lod);
}

#define GL_USES_FRAG_COORD
float atan_emu(float y, float x)
{
    if(x == 0 && y == 0) x = 1;
    return atan2(y, x);
}


float mod_emu(float x, float y)
{
    return x - y * floor(x / y);
}


float dyn_index_vec4_float4(in float4 base, in int index)
{
switch (index) {
case (0):
return base[0];
case (1):
return base[1];
case (2):
return base[2];
case (3):
return base[3];
default:
break;
}
if ((index < 0))
{
return base[0];
}
{
return base[3];
}
}
void dyn_index_write_vec4_float4(inout float4 base, in int index, in float value)
{
switch (index) {
case (0):
(base[0] = value);
return;
case (1):
(base[1] = value);
return;
case (2):
(base[2] = value);
return;
case (3):
(base[3] = value);
return;
default:
break;
}
if ((index < 0))
{
(base[0] = value);
return;
}
{
(base[3] = value);
}
}
void f_mainImage_float4(inout float4 _fragColor, in float2 _fragCoord);
;
struct PS_OUTPUT
{
    float4 out_shadertoy_out_color : SV_TARGET0;
};

PS_OUTPUT generateOutput()
{
    PS_OUTPUT output;
    output.out_shadertoy_out_color = out_shadertoy_out_color;
    return output;
}


PS_OUTPUT main(PS_INPUT input){
    float rhw = 1.0 / input.gl_FragCoord.w;
    gl_FragCoord.x = input.dx_Position.x;
    gl_FragCoord.y = input.dx_Position.y;
    gl_FragCoord.z = (input.gl_FragCoord.z * rhw) * dx_DepthFront.x + dx_DepthFront.y;
    gl_FragCoord.w = rhw;

(out_shadertoy_out_color = float4(1.0, 1.0, 1.0, 1.0));
float4 _color3110 = {0.0, 0.0, 0.0, 1.0};
f_mainImage_float4(_color3110, gl_FragCoord.xy);
if ((out_shadertoy_out_color.x < 0.0))
{
(_color3110 = float4(1.0, 0.0, 0.0, 1.0));
}
if ((out_shadertoy_out_color.y < 0.0))
{
(_color3110 = float4(0.0, 1.0, 0.0, 1.0));
}
if ((out_shadertoy_out_color.z < 0.0))
{
(_color3110 = float4(0.0, 0.0, 1.0, 1.0));
}
if ((out_shadertoy_out_color.w < 0.0))
{
(_color3110 = float4(1.0, 1.0, 0.0, 1.0));
}
(out_shadertoy_out_color = vec4_ctor(_color3110.xyz, 1.0));
return generateOutput();
}
float f_smin(in float _a, in float _b, in float _k)
{
float _h3115 = max((_k - abs((_a - _b))), 0.0);
return (min(_a, _b) - (((_h3115 * _h3115) * 0.25) / _k));
}
float f_smax(in float _a, in float _b, in float _k)
{
(_k *= 1.4);
float _h3120 = max((_k - abs((_a - _b))), 0.0);
return (max(_a, _b) + (((_h3120 * _h3120) * _h3120) / ((6.0 * _k) * _k)));
}
float f_sclamp(in float _x, in float _a, in float _b)
{
float _k3130 = {0.1};
return f_smax(f_smin(_x, _b, _k3130), _a, _k3130);
}
float f_opOnion(in float _sdf, in float _thickness)
{
return (abs(_sdf) - _thickness);
}
float f_det(in float2 _a, in float2 _b)
{
return ((_a.x * _b.y) - (_b.x * _a.y));
}
float f_sdTorus(in float3 _p, in float _ra, in float _rb)
{
return (length(vec2_ctor((length(_p.xz) - _ra), _p.y)) - _rb);
}
float f_sdCappedTorus(in float3 _p, in float2 _sc, in float _ra, in float _rb)
{
(_p.x = abs(_p.x));
float sdc8 = {0};
if (((_sc.y * _p.x) > (_sc.x * _p.z)))
{
(sdc8 = dot(_p.xz, _sc));
}
else
{
(sdc8 = length(_p.xz));
}
float _k3158 = sdc8;
return (sqrt(((dot(_p, _p) + (_ra * _ra)) - ((2.0 * _ra) * _k3158))) - _rb);
}
float f_sdSphere(in float3 _p, in float _r)
{
return (length(_p) - _r);
}
float f_sdEllipsoid(in float3 _p, in float3 _r)
{
float _k03165 = length((_p / _r));
float _k13166 = length((_p / (_r * _r)));
return ((_k03165 * (_k03165 - 1.0)) / _k13166);
}
float f_sdArc(in float2 _p, in float2 _scb, in float _ra)
{
(_p.x = abs(_p.x));
float sdc9 = {0};
if (((_scb.y * _p.x) > (_scb.x * _p.y)))
{
(sdc9 = dot(_p.xy, _scb));
}
else
{
(sdc9 = length(_p.xy));
}
float _k3175 = sdc9;
return sqrt(((dot(_p, _p) + (_ra * _ra)) - ((2.0 * _ra) * _k3175)));
}
float4 f_sdBezier(in float3 _p, in float3 _va, in float3 _vb, in float3 _vc)
{
float3 _w3181 = normalize(cross((_vc - _vb), (_va - _vb)));
float3 _u3182 = normalize((_vc - _vb));
float3 _v3183 = cross(_w3181, _u3182);
float2 _m3184 = vec2_ctor(dot((_va - _vb), _u3182), dot((_va - _vb), _v3183));
float2 _n3185 = vec2_ctor(dot((_vc - _vb), _u3182), dot((_vc - _vb), _v3183));
float3 _q3186 = vec3_ctor(dot((_p - _vb), _u3182), dot((_p - _vb), _v3183), dot((_p - _vb), _w3181));
float _mn3187 = f_det(_m3184, _n3185);
float _mq3188 = f_det(_m3184, _q3186.xy);
float _nq3189 = f_det(_n3185, _q3186.xy);
float2 _g3190 = ((((_nq3189 + _mq3188) + _mn3187) * _n3185) + (((_nq3189 + _mq3188) - _mn3187) * _m3184));
float _f3191 = ((((_nq3189 - _mq3188) + _mn3187) * ((_nq3189 - _mq3188) + _mn3187)) + ((4.0 * _mq3188) * _nq3189));
float2 _z3192 = (((0.5 * _f3191) * vec2_ctor((-_g3190.y), _g3190.x)) / dot(_g3190, _g3190));
float _t3193 = clamp((0.5 + ((0.5 * f_det((_z3192 - _q3186.xy), (_m3184 + _n3185))) / _mn3187)), 0.0, 1.0);
float2 _cp3194 = ((((_m3184 * (1.0 - _t3193)) * (1.0 - _t3193)) + ((_n3185 * _t3193) * _t3193)) - _q3186.xy);
float _d23195 = dot(_cp3194, _cp3194);
return vec4_ctor(sqrt((_d23195 + (_q3186.z * _q3186.z))), _t3193, _q3186.z, ((-sign(_f3191)) * sqrt(_d23195)));
}
float2 f_sdSegment(in float3 _p, in float3 _a, in float3 _b)
{
float3 _pa3200 = (_p - _a);
float3 _ba3201 = (_b - _a);
float _h3202 = clamp((dot(_pa3200, _ba3201) / dot(_ba3201, _ba3201)), 0.0, 1.0);
return vec2_ctor(length((_pa3200 - (_ba3201 * _h3202))), _h3202);
}
float f_sdCone(in float3 _p, in float2 _c)
{
float2 _q3216 = vec2_ctor(length(_p.xz), _p.y);
float2 _a3217 = (_q3216 - (_c * clamp((((_q3216.x * _c.x) + (_q3216.y * _c.y)) / dot(_c, _c)), 0.0, 1.0)));
float2 _b3218 = (_q3216 - (_c * vec2_ctor(clamp((_q3216.x / _c.x), 0.0, 1.0), 1.0)));
float _s3219 = (-sign(_c.y));
float2 _d3220 = min(vec2_ctor(dot(_a3217, _a3217), (_s3219 * ((_q3216.x * _c.y) - (_q3216.y * _c.x)))), vec2_ctor(dot(_b3218, _b3218), (_s3219 * (_q3216.y - _c.y))));
return ((-sqrt(_d3220.x)) * sign(_d3220.y));
}
float4 f_opElongate(in float3 _p, in float3 _h)
{
float3 _q3233 = (abs(_p) - _h);
return vec4_ctor(max(_q3233, 0.0), min(max(_q3233.x, max(_q3233.y, _q3233.z)), 0.0));
}
float2 f_iCylinderY(in float3 _ro, in float3 _rd, in float _rad)
{
float3 _oc3238 = _ro;
float _a3239 = dot(_rd.xz, _rd.xz);
float _b3240 = dot(_oc3238.xz, _rd.xz);
float _c3241 = (dot(_oc3238.xz, _oc3238.xz) - (_rad * _rad));
float _h3242 = ((_b3240 * _b3240) - (_a3239 * _c3241));
if ((_h3242 < 0.0))
{
return float2(-1.0, -1.0);
}
(_h3242 = sqrt(_h3242));
return (vec2_ctor(((-_b3240) - _h3242), ((-_b3240) + _h3242)) / _a3239);
}
float f_linearstep(in float _a, in float _b, in float _x)
{
return clamp(((_x - _a) / (_b - _a)), 0.0, 1.0);
}
float2 f_rot(in float2 _p, in float _an)
{
float _cc3258 = cos(_an);
float _ss3259 = sin(_an);
return mul(transpose(mat2_ctor(_cc3258, (-_ss3259), _ss3259, _cc3258)), _p);
}
float f_expSustainedImpulse(in float _t, in float _f, in float _k)
{
return ((smoothstep(0.0, _f, _t) * 1.1) - (0.1 * exp2(((-_k) * max((_t - _f), 0.0)))));
}
float f_noise1(const uint _tex, in float3 _x)
{
return gl_texture3DLod(_tex, ((_x + 0.5) / 32.0), 0.0).x;
}
float f_fbm1(const uint _tex, in float3 _x)
{
float _f3279 = {0.0};
(_f3279 += (0.5 * f_noise1(_tex, _x)));
(_x *= 2.01);
(_f3279 += (0.25 * f_noise1(_tex, _x)));
(_x *= 2.01);
(_f3279 += (0.125 * f_noise1(_tex, _x)));
(_x *= 2.01);
(_f3279 += (0.0625 * f_noise1(_tex, _x)));
(_f3279 = ((2.0 * _f3279) - 0.9375));
return _f3279;
}
float f_bnoise(in float _x)
{
float _i3290 = floor(_x);
float _f3291 = frac(_x);
float _s3292 = sign((frac((_x / 2.0)) - 0.5));
float _k3293 = (0.5 + (0.5 * sin(_i3290)));
return (((_s3292 * _f3291) * (_f3291 - 1.0)) * (((((16.0 * _k3293) - 4.0) * _f3291) * (_f3291 - 1.0)) - 1.0));
}
float3 f_fbm13(in float _x, in float _g)
{
float3 _n3297 = {0.0, 0.0, 0.0};
float _s3298 = {1.0};
{ for(int _i3299 = {0}; (_i3299 < 6); (_i3299++))
{
(_n3297 += (_s3298 * vec3_ctor(f_bnoise(_x), f_bnoise((_x + 13.314)), f_bnoise((_x + 31.7211)))));
(_s3298 *= _g);
(_x *= 2.01);
(_x += 0.131);
}
}
return _n3297;
}
float3x3 f_calcCamera(in float _time, inout float3 _oRo, inout float _oFl)
{
float3 _ta3306 = {0.0, -0.30000001, 0.0};
float3 _ro3307 = {-0.55629998, -0.2, 2.7442};
float _fl3308 = {1.7};
float3 _fb13309 = f_fbm13((0.15000001 * _time), 0.5);
(_ro3307.xyz += (0.0099999998 * _fb13309.xyz));
float3 _fb23310 = f_fbm13((0.33000001 * _time), 0.64999998);
(_fb23310 = ((_fb23310 * _fb23310) * sign(_fb23310)));
(_ta3306.xy += (0.0049999999 * _fb23310.xy));
float _cr3311 = (-0.0099999998 + (0.0020000001 * _fb23310.z));
float3 _ww3312 = normalize((_ta3306 - _ro3307));
float3 _uu3313 = normalize(cross(_ww3312, vec3_ctor(sin(_cr3311), cos(_cr3311), 0.0)));
float3 _vv3314 = cross(_uu3313, _ww3312);
(_oRo = _ro3307);
(_oFl = _fl3308);
return mat3_ctor(_uu3313, _vv3314, _ww3312);
}
float4 f_sdHair(in float3 _p, in float3 _pa, in float3 _pb, in float3 _pc, in float _an, inout float2 _occ_id)
{
float4 _b3322 = f_sdBezier(_p, _pa, _pb, _pc);
float2 _q3323 = f_rot(_b3322.zw, _an);
float2 _id23324 = round((_q3323 / 0.1));
(_id23324 = clamp(_id23324, float2(0.0, 0.0), float2(2.0, 1.0)));
(_q3323 -= (0.1 * _id23324));
float _id3325 = ((11.0 * _id23324.x) + (_id23324.y * 13.0));
(_q3323 += (((smoothstep(0.5, 0.80000001, _b3322.y) * 0.02) * float2(0.40000001, 1.5)) * cos(((23.0 * _b3322.y) + (_id3325 * float2(13.0, 17.0))))));
(_occ_id.x = clamp(((length(_q3323) * 8.0) - 0.2), 0.0, 1.0));
float4 _res3326 = vec4_ctor(99, _q3323, _b3322.y);
{ for(int _i3327 = {0}; (_i3327 < 3); (_i3327++))
{
float2 _tmp3328 = (_q3323 + (0.0099999998 * cos(((_id3325 + (180.0 * _b3322.y)) + vec2_ctor((2 * _i3327), (6 - (2 * _i3327)))))));
float _lt3329 = (length(_tmp3328) - 0.02);
if ((_lt3329 < _res3326.x))
{
(_occ_id.y = (_id3325 + float_ctor(_i3327)));
(_res3326.x = _lt3329);
(_res3326.yz = _tmp3328);
}
}
}
return _res3326;
}
float4 f_sdHoodie(in float3 _pos)
{
float3 _opos3332 = _pos;
(_pos.x += (((0.090000004 * sin(((3.5 * _pos.y) - 0.5))) * sin(_pos.z)) + 0.015));
(_pos.xyz += ((0.029999999 * sin((2.0 * _pos.y))) * sin((7.0 * _pos.zyx))));
float3 _hos3333 = (_pos - float3(0.0, -0.33000001, 0.15000001));
(_hos3333.x -= (0.030999999 * smoothstep(0.0, 1.0, (_opos3332.y + 0.33000001))));
(_hos3333.yz = f_rot(_hos3333.yz, 0.89999998));
float _d13334 = f_sdEllipsoid(_hos3333, vec3_ctor((0.95999998 - (_pos.y * 0.1)), 1.23, 1.5));
float _d23335 = (((0.94999999 * _pos.z) - (0.31200001 * _pos.y)) - 0.89999998);
float _d3336 = max(f_opOnion(_d13334, 0.0099999998), _d23335);
float3 _sos3337 = vec3_ctor(abs(_pos.x), _pos.yz);
float2 _se3338 = f_sdSegment(_sos3337, float3(0.18000001, -1.6, -0.30000001), float3(1.1, -1.9, 0.0));
(_d3336 = f_smin(_d3336, (_se3338.x - lerp(0.25, 0.43000001, _se3338.y)), 0.40000001));
(_d3336 = f_smin(_d3336, f_sdSphere((_sos3337 - float3(0.30000001, -2.2, 0.40000001)), 0.5), 0.2));
(_opos3332.x -= (0.02 * sin((9.0 * _opos3332.y))));
float4 _w3339 = f_opElongate((_opos3332 - float3(0.0, -1.2, 0.30000001)), float3(0.0, 0.30000001, 0.0));
(_d3336 = f_smin(_d3336, (_w3339.w + f_sdCappedTorus(vec3_ctor(_w3339.xy, (-_w3339.z)), float2(0.60000002, -0.80000001), 0.60000002, 0.02)), 0.1));
(_d3336 += (((0.0040000002 * sin((_pos.x * 90.0))) * sin((_pos.y * 90.0))) * sin((_pos.z * 90.0))));
(_d3336 -= (0.0020000001 * sin((_pos.x * 300.0))));
(_d3336 -= (0.02 * (1.0 - smoothstep(0.0, 0.039999999, abs(f_opOnion(_pos.x, 1.1))))));
(_d3336 = min(_d3336, (length(vec2_ctor(_d13334, _d23335)) - 0.015)));
return vec4_ctor(_d3336, _pos);
}
float3 f_moveHead(in float3 _pos, in float3 _an, in float _amount)
{
(_pos.y -= -1.0);
(_pos.xz = f_rot(_pos.xz, (_amount * _an.x)));
(_pos.xy = f_rot(_pos.xy, (_amount * _an.y)));
(_pos.yz = f_rot(_pos.yz, (_amount * _an.z)));
(_pos.y += -1.0);
return _pos;
}
static float3 _animData = {0, 0, 0};
static float3 _animHead = {0, 0, 0};
float4 f_map(in float3 _pos, in float _time, inout float _outMat, inout float3 _uvw)
{
(_outMat = 1.0);
(_pos.y /= 1.04);
float3 _opos3352 = {0, 0, 0};
(_opos3352 = f_moveHead(_pos, _animHead, smoothstep(-1.2, 0.2, _pos.y)));
(_pos = f_moveHead(_pos, _animHead, smoothstep(-1.4, -1.0, _pos.y)));
(_pos.x *= 1.04);
(_pos.y /= 1.02);
(_uvw = _pos);
float3 _qos3353 = vec3_ctor(abs(_pos.x), _pos.yz);
float3 _sos3354 = vec3_ctor(sqrt(((_qos3353.x * _qos3353.x) + 0.00050000002)), _pos.yz);
float _d3355 = f_sdEllipsoid((_pos - float3(0.0, 0.050000001, 0.07)), float3(0.80000001, 0.75, 0.85000002));
float3 _mos3356 = (_pos - float3(0.0, -0.38, 0.34999999));
(_mos3356.yz = f_rot(_mos3356.yz, 0.40000001));
(_mos3356.yz = f_rot(_mos3356.yz, (0.1 * _animData.z)));
float _d23357 = f_sdEllipsoid((_mos3356 - float3(0.0, -0.17, 0.16)), vec3_ctor((0.66000003 + f_sclamp(((_mos3356.y * 0.89999998) - (0.1 * _mos3356.z)), -0.30000001, 0.40000001)), (0.43000001 + f_sclamp((_mos3356.y * 0.5), -0.5, 0.2)), (0.5 + f_sclamp((_mos3356.y * 0.30000001), -0.44999999, 0.5))));
(_d23357 = f_smax(_d23357, (-f_sdEllipsoid((_mos3356 - vec3_ctor(0, 0.059999999, (0.60000002 + (0.050000001 * _animData.z)))), vec3_ctor(0.16, (0.035 + (0.050000001 * _animData.z)), 0.1))), 0.0099999998));
float4 _b3358 = f_sdBezier(vec3_ctor(abs(_mos3356.x), _mos3356.yz), float3(0.0, 0.0099999998, 0.61000001), vec3_ctor((0.093999997 + (0.0099999998 * _animData.z)), 0.015, 0.61000001), vec3_ctor((0.18000001 - (0.02 * _animData.z)), (0.059999999 + (_animData.z * 0.050000001)), (0.56999999 - (0.0060000001 * _animData.z))));
float _isLip3359 = smoothstep(0.045000002, 0.039999999, (_b3358.x + (_b3358.y * 0.029999999)));
(_d23357 = f_smin(_d23357, (_b3358.x - ((0.027000001 * (1.0 - (_b3358.y * _b3358.y))) * smoothstep(1.0, 0.40000001, _b3358.y))), 0.02));
(_d3355 = f_smin(_d3355, _d23357, 0.19));
(_d3355 = f_smin(_d3355, f_sdSphere((_qos3353 - float3(0.2, -0.33000001, 0.62)), 0.28), 0.039999999));
float3 _eos3360 = (_sos3354 - float3(0.30000001, -0.039999999, 0.69999999));
(_eos3360.xz = f_rot(_eos3360.xz, -0.2));
(_eos3360.xy = f_rot(_eos3360.xy, 0.30000001));
(_eos3360.yz = f_rot(_eos3360.yz, -0.2));
(_d23357 = f_sdEllipsoid((_eos3360 - float3(-0.050000001, -0.050000001, 0.2)), vec3_ctor(0.2, (0.14 - (0.059999999 * _animData.x)), 0.1)));
(_d3355 = f_smax(_d3355, (-_d23357), 0.15000001));
(_eos3360 = (_sos3354 - float3(0.31999999, -0.079999998, 0.80000001)));
(_eos3360.xz = f_rot(_eos3360.xz, -0.40000001));
(_d23357 = f_sdEllipsoid(_eos3360, float3(0.154, 0.11, 0.1)));
(_d3355 = f_smax(_d3355, (-_d23357), 0.050000001));
float3 _oos3361 = (_qos3353 - float3(0.25, -0.059999999, 0.41999999));
(_d23357 = f_sdSphere(_oos3361, 0.40000001));
(_oos3361.xz = f_rot(_oos3361.xz, -0.2));
(_oos3361.xy = f_rot(_oos3361.xy, 0.2));
float3 _tos3362 = _oos3361;
(_oos3361.yz = f_rot(_oos3361.yz, (-0.60000002 + (0.57999998 * _animData.x))));
(_tos3362 = (_tos3362 - vec3_ctor(-0.02, 0.059999999, (0.2 + (0.02 * _animData.x)))));
(_tos3362.yz = f_rot(_tos3362.yz, 0.80000001));
(_tos3362.xy = f_rot(_tos3362.xy, -0.2));
(_d3355 = f_smin(_d3355, f_sdTorus(_tos3362, 0.28999999, 0.0099999998), 0.029999999));
(_eos3360 = (_qos3353 - float3(0.33000001, -0.07, 0.52999997)));
(_eos3360.xy = f_rot(_eos3360.xy, 0.2));
(_eos3360.yz = f_rot(_eos3360.yz, (0.34999999 - (0.25 * _animData.x))));
(_d23357 = f_smax((_d23357 - 0.0049999999), (-max((_oos3361.y + 0.097999997), ((-_eos3360.y) - 0.025))), 0.02));
(_d3355 = f_smin(_d3355, _d23357, 0.012));
(_oos3361.x -= 0.0099999998);
float _xx3363 = clamp((_oos3361.x + 0.17), 0.0, 1.0);
float _ra3364 = (0.34999999 + (((0.1 * sqrt((_xx3363 / 0.2))) * (1.0 - smoothstep(0.30000001, 0.40000001, _xx3363))) * (0.60000002 + (0.40000001 * sin((_xx3363 * 256.0))))));
float _rc3365 = (0.18000001 / (1.0 - (0.69999999 * smoothstep(0.15000001, 0.5, _animData.x))));
(_oos3361.y -= (-0.18000001 - ((_rc3365 - 0.18000001) / 1.8)));
(_d23357 = ((0.55555558 * f_sdArc((_oos3361.xy * float2(1.0, 1.8)), float2(0.89999998, 0.43588996), _rc3365)) - 0.001));
float _deyelashes3366 = (max(_d23357, (length(_oos3361.xz) - _ra3364)) - 0.003);
(_eos3360 = (_pos - vec3_ctor(0.0, (-0.079000004 + (_animData.y * 0.0049999999)), 0.86000001)));
(_eos3360.yz = f_rot(_eos3360.yz, -0.23));
float _h3367 = smoothstep(0.0, 0.25999999, (-_eos3360.y));
(_d23357 = ((f_sdCone((_eos3360 - float3(0.0, -0.02, 0.0)), float2(0.029999999, -0.25)) - (0.039999999 * _h3367)) - 0.0099999998));
(_eos3360.x = sqrt(((_eos3360.x * _eos3360.x) + 0.001)));
(_d23357 = f_smin(_d23357, f_sdSphere((_eos3360 - float3(0.0, -0.25, 0.037)), 0.059999999), 0.07));
(_d23357 = f_smin(_d23357, f_sdSphere((_eos3360 - float3(0.1, -0.27000001, 0.029999999)), 0.039999999), 0.07));
(_d23357 = f_smin(_d23357, f_sdSphere((_eos3360 - float3(0.0, -0.31999999, 0.050000001)), 0.025), 0.039999999));
(_d23357 = f_smax(_d23357, (-f_sdSphere((_eos3360 - float3(0.07, -0.31, 0.037999999)), 0.02)), 0.035));
(_d3355 = f_smin(_d3355, _d23357, (0.050000001 - (0.029999999 * _h3367))));
(_eos3360 = (_pos - vec3_ctor(0.0, ((-0.38 + (_animData.y * 0.003)) + (0.0099999998 * _animData.z)), 0.70999998)));
(_tos3362 = (_eos3360 - float3(0.0, -0.13, 0.059999999)));
(_tos3362.yz = f_rot(_tos3362.yz, 0.2));
float _dTeeth3368 = f_sdTorus(_tos3362, 0.15000001, 0.015);
(_eos3360.yz = f_rot(_eos3360.yz, -0.5));
(_eos3360.x /= 1.04);
(_d23357 = (f_sdCone((_eos3360 - float3(0.0, 0.0, 0.029999999)), float2(0.14, -0.2)) - 0.029999999));
(_d23357 = max(_d23357, (-(_eos3360.z - 0.029999999))));
(_d3355 = f_smin(_d3355, _d23357, 0.050000001));
(_eos3360.x = abs(_eos3360.x));
(_b3358 = f_sdBezier(_eos3360, float3(0.0, -0.22, 0.17), float3(0.079999998, -0.22, 0.17), vec3_ctor((0.17 - (0.02 * _animData.z)), (-0.23999999 - (0.0099999998 * _animData.z)), 0.079999998)));
(_d23357 = (length((_b3358.zw / float2(0.5, 1.0))) - (0.029999999 * clamp((1.0 - (_b3358.y * _b3358.y)), 0.0, 1.0))));
(_d3355 = f_smin(_d3355, _d23357, 0.02));
(_isLip3359 = max(_isLip3359, (smoothstep(0.029999999, 0.0049999999, abs(((_b3358.z + 0.015) + (abs(_eos3360.x) * 0.039999999)))) - smoothstep(0.44999999, 0.47, (_eos3360.x - (_eos3360.y * 1.15))))));
float2 _se3369 = f_sdSegment(_pos, float3(0.0, -0.44999999, 1.01), float3(0.0, -0.47, 1.09));
(_d23357 = ((_se3369.x - 0.029999999) - (0.059999999 * _se3369.y)));
(_d3355 = f_smax(_d3355, (-_d23357), 0.039999999));
(_isLip3359 *= smoothstep(0.0099999998, 0.029999999, _d23357));
(_se3369 = f_sdSegment(_pos, float3(0.0, -0.64999998, 0.0), float3(0.0, -1.7, -0.1)));
(_d23357 = (_se3369.x - 0.38));
(_se3369 = f_sdSegment(_sos3354, float3(0.0, -1.55, 0.0), float3(0.60000002, -1.65, 0.0)));
(_d23357 = f_smin(_d23357, (_se3369.x - 0.20999999), 0.1));
(_d3355 = f_smin(_d3355, _d23357, 0.40000001));
float4 _res3370 = vec4_ctor(_d3355, _isLip3359, 0, 0);
if ((_deyelashes3366 < _res3370.x))
{
(_res3370.x = (_deyelashes3366 * 0.80000001));
(_res3370.yzw = float3(0.0, 1.0, 0.0));
}
if ((_dTeeth3368 < _res3370.x))
{
(_res3370.x = _dTeeth3368);
(_outMat = 5.0);
}
(_pos.x /= 1.05);
(_eos3360 = (_qos3353 - float3(0.25, -0.059999999, 0.41999999)));
(_d23357 = f_sdSphere(_eos3360, 0.40000001));
if ((_d23357 < _res3370.x))
{
(_res3370.x = _d23357);
(_outMat = 2.0);
(_uvw = _pos);
}
{
float2 _occ_id3371 = {0, 0};
float2 _tmp3372 = {0, 0};
(_qos3353 = _pos);
(_qos3353.x = abs(_pos.x));
float4 _pres3373 = f_sdHair(_pos, float3(-0.30000001, 0.55000001, 0.80000001), float3(0.94999999, 0.69999999, 0.85000002), float3(0.40000001, -1.45, 0.94999999), -0.89999998, _occ_id3371);
float4 _pres23374 = f_sdHair(_pos, float3(-0.40000001, 0.60000002, 0.55000001), float3(-1.0, 0.40000001, 0.2), float3(-0.60000002, -1.4, 0.69999999), 0.60000002, _tmp3372);
if ((_pres23374.x < _pres3373.x))
{
(_pres3373 = _pres23374);
(_occ_id3371 = _tmp3372);
(_occ_id3371.y += 40.0);
}
(_pres23374 = f_sdHair(_qos3353, float3(0.40000001, 0.69999999, 0.40000001), float3(1.0, 0.5, 0.44999999), float3(0.40000001, -1.45, 0.55000001), -0.2, _tmp3372));
if ((_pres23374.x < _pres3373.x))
{
(_pres3373 = _pres23374);
(_occ_id3371 = _tmp3372);
(_occ_id3371.y += 80.0);
}
(_pres3373.x *= 0.80000001);
if ((_pres3373.x < _res3370.x))
{
(_res3370 = vec4_ctor(_pres3373.x, _occ_id3371.y, 0.0, _occ_id3371.x));
(_uvw = _pres3373.yzw);
(_outMat = 4.0);
}
}
float4 _tmp3375 = f_sdHoodie(_opos3352);
if ((_tmp3375.x < _res3370.x))
{
(_res3370.x = _tmp3375.x);
(_outMat = 3.0);
(_uvw = _tmp3375.yzw);
}
return _res3370;
}
float4 f_mapD(in float3 _pos, in float _time)
{
float _matID3379 = {0};
float3 _uvw3380 = {0, 0, 0};
float4 _h3381 = f_map(_pos, _time, _matID3379, _uvw3380);
if ((_matID3379 < 1.5))
{
float _d3382 = f_fbm1(_iChannel0, (120.0 * _uvw3380));
(_h3381.x += ((0.0015 * _d3382) * _d3382));
}
else
{
if (((_matID3379 > 3.5) && (_matID3379 < 4.5)))
{
float _te3383 = gl_texture2D(_iChannel2, vec2_ctor((0.25 * atan_emu(_uvw3380.x, _uvw3380.y)), (8.0 * _uvw3380.z))).x;
(_h3381.x -= (0.02 * _te3383));
}
}
return _h3381;
}
float3 f_calcNormal(in float3 _pos, in float _time)
{
float4 _n3388 = {0.0, 0.0, 0.0, 0.0};
{LOOP for(int _i3389 = min(_iFrame, 0); (_i3389 < 4); (_i3389++))
{
float4 _s3390 = vec4_ctor(_pos, 0.0);
int sdd5 = _i3389;
float sdd6 = dyn_index_vec4_float4(_s3390, sdd5);
(sdd6 += 0.001);
dyn_index_write_vec4_float4(_s3390, sdd5, sdd6);
int sdd7 = _i3389;
float sdd8 = dyn_index_vec4_float4(_n3388, sdd7);
(sdd8 = f_mapD(_s3390.xyz, _time).x);
dyn_index_write_vec4_float4(_n3388, sdd7, sdd8);
}
}
return normalize((_n3388.xyz - _n3388.w));
}
float f_calcSoftshadow(in float3 _ro, in float3 _rd, in float _mint, in float _tmax, in float _time, in float _k)
{
float2 _sph3400 = f_iCylinderY(_ro, _rd, 1.5);
(_tmax = min(_tmax, _sph3400.y));
float _res3401 = {1.0};
float _t3402 = _mint;
{ for(int _i3403 = {0}; (_i3403 < 128); (_i3403++))
{
float _kk3404 = {0};
float3 _kk23405 = {0, 0, 0};
float _h3406 = f_map((_ro + (_rd * _t3402)), _time, _kk3404, _kk23405).x;
(_res3401 = min(_res3401, ((_k * _h3406) / _t3402)));
(_t3402 += clamp(_h3406, 0.0049999999, 0.1));
if (((_res3401 < 0.0020000001) || (_t3402 > _tmax)))
{
break;
}
}
}
return max(_res3401, 0.0);
}
float f_calcOcclusion(in float3 _pos, in float3 _nor, in float _time)
{
float _kk3411 = {0};
float3 _kk23412 = {0, 0, 0};
float _ao3413 = {0.0};
float _off3414 = gl_texture2DLod(_iChannel3, (gl_FragCoord.xy / 256.0), 0.0).x;
float4 _k3415 = (float4(0.7012912, 0.3941462, 0.82945848, 0.109841) + _off3414);
{ for(int _i3416 = min(_iFrame, 0); (_i3416 < 16); (_i3416++))
{
(_k3415 = frac((_k3415 + float4(0.85667491, 0.73389196, 0.62870681, 0.53859735))));
float3 _ap3417 = normalize((-1.0 + (2.0 * _k3415.xyz)));
float _h3418 = (_k3415.w * 0.1);
(_ap3417 = ((_nor + _ap3417) * _h3418));
float _d3419 = f_map((_pos + _ap3417), _time, _kk3411, _kk23412).x;
(_ao3413 += max(0.0, (_h3418 - _d3419)));
if ((_ao3413 > 16.0))
{
break;
}
}
}
(_ao3413 /= 16.0);
return clamp((1.0 - (_ao3413 * 24.0)), 0.0, 1.0);
}
float2 f_intersect(in float3 _ro, in float3 _rd, in float _tmax, in float _time, inout float3 _cma, inout float3 _uvw)
{
(_cma = float3(0.0, 0.0, 0.0));
(_uvw = float3(0.0, 0.0, 0.0));
float _matID3427 = {-1.0};
float _t3428 = {1.0};
float2 _sph3429 = f_iCylinderY(_ro, _rd, 1.5);
if ((_sph3429.y < 0.0))
{
return float2(-1.0, -1.0);
}
(_tmax = min(_tmax, _sph3429.y));
(_t3428 = max(1.0, _sph3429.x));
{ for(int _i3430 = {0}; (_i3430 < 256); (_i3430++))
{
float3 _pos3431 = (_ro + (_t3428 * _rd));
float _tmp3432 = {0};
float4 _h3433 = f_map(_pos3431, _time, _tmp3432, _uvw);
if ((_h3433.x < 0.001))
{
(_cma = _h3433.yzw);
(_matID3427 = _tmp3432);
break;
}
(_t3428 += (_h3433.x * 0.94999999));
if ((_t3428 > _tmax))
{
break;
}
}
}
return vec2_ctor(_t3428, _matID3427);
}
float3 f_sdif(in float _ndl, in float _ir)
{
float _pndl3437 = clamp(_ndl, 0.0, 1.0);
float _nndl3438 = clamp((-_ndl), 0.0, 1.0);
float sdd9 = clamp(((_ir * 0.75) - _nndl3438), 0.0, 1.0);
return (vec3_ctor(_pndl3437) + (float3(0.69999999, 0.07, 0.0069999998) * (sdd9 * sdd9)));
}
float f_animEye(in float _time)
{
float _t3442 = mod_emu((_time - 0.31), 6.0999999);
float _q3443 = frac(((_time - 0.31) / 12.2));
float sdca = {0};
if ((_q3443 > 0.5))
{
(sdca = 1.0);
}
else
{
(sdca = 0.0);
}
float _s3444 = sdca;
float sdcb = {0};
if ((_t3442 < 0.15000001))
{
(sdcb = (1.0 - _s3444));
}
else
{
(sdcb = _s3444);
}
return sdcb;
}
float3 f_renderGirl(in float2 _p, in float3 _ro, in float3 _rd, in float _tmax, in float3 _col, in float _time)
{
float3 _cma3452 = {0, 0, 0};
float3 _uvw3453 = {0, 0, 0};
float2 _tm3454 = f_intersect(_ro, _rd, _tmax, _time, _cma3452, _uvw3453);
FLATTEN if ((_tm3454.y > 0.0))
{
float3 _pos3455 = (_ro + (_tm3454.x * _rd));
float3 _nor3456 = f_calcNormal(_pos3455, _time);
float _ks3457 = {1.0};
float _se3458 = {16.0};
float _tinterShadow3459 = {0.0};
float _sss3460 = {0.0};
float _focc3461 = {1.0};
if ((_tm3454.y < 1.5))
{
float3 _qos3462 = vec3_ctor(abs(_uvw3453.x), _uvw3453.yz);
(_col = lerp(float3(0.22499999, 0.15000001, 0.12), float3(0.23999999, 0.1, 0.066), (smoothstep(0.40000001, 0.0, length((_qos3462.xy - float2(0.41999999, -0.30000001)))) + smoothstep(0.15000001, 0.0, length(((_qos3462.xy - float2(0.0, -0.28999999)) / float2(1.4, 1.0)))))));
(_col -= (0.029999999 * smoothstep(0.13, 0.0, length(((_qos3462.xy - float2(0.0, -0.49000001)) / float2(2.0, 1.0))))));
(_col = lerp(_col, float3(0.14, 0.059999999, 0.1), (_cma3452.x * step(-0.69999999, _qos3462.y))));
(_col = lerp(_col, float3(0.024, 0.012, 0.012), (0.89999998 * _cma3452.y)));
(_uvw3453.y += ((0.025 * _animData.x) * smoothstep(0.30000001, 0.1, length((_uvw3453 - float3(0.0, 0.1, 1.0))))));
(_uvw3453.y -= ((0.0049999999 * _animData.y) * smoothstep(0.090000004, 0.0, abs((length(((_uvw3453.xy - float2(0.0, -0.38)) / float2(2.5, 1.0))) - 0.12)))));
float2 _ti3463 = floor((9.0 + (_uvw3453.xy / 0.039999999)));
float2 _uv3464 = (frac((_uvw3453.xy / 0.039999999)) - 0.5);
float _te3465 = frac((111.0 * sin(((1111.0 * _ti3463.x) + (1331.0 * _ti3463.y)))));
(_te3465 = (smoothstep(0.89999998, 1.0, _te3465) * exp(((-dot(_uv3464, _uv3464)) * 24.0))));
(_col *= lerp(float3(1.1, 1.1, 1.1), float3(0.80000001, 0.60000002, 0.40000001), _te3465));
(_ks3457 = (0.5 + (4.0 * gl_texture2D(_iChannel3, (_uvw3453.xy * 1.1)).x)));
(_se3458 = 12.0);
(_ks3457 *= 0.5);
(_tinterShadow3459 = 1.0);
(_sss3460 = 1.0);
(_ks3457 *= (1.0 + _cma3452.x));
(_col *= (1.0 - smoothstep(0.47999999, 0.50999999, _uvw3453.y)));
float _d23466 = f_sdEllipsoid((_qos3462 - float3(0.25, -0.029999999, 0.43000001)), float3(0.37, 0.41999999, 0.40000001));
(_col = lerp(_col, float3(0.059999999, 0.024, 0.059999999), (1.0 - smoothstep(0.0, 0.029999999, _d23466))));
{
float4 _be3467 = f_sdBezier(_qos3462, vec3_ctor((0.16 + (0.0099999998 * _animData.x)), (0.11 - (0.02 * _animData.x)), 0.88999999), vec3_ctor(0.37, (0.18000001 - (0.0049999999 * _animData.x)), (0.81999999 + (0.0049999999 * _animData.x))), float3(0.52999997, 0.15000001, 0.69));
float _ra3468 = (0.0049999999 + (0.0099999998 * sqrt((1.0 - _be3467.y))));
float _dd3469 = (1.0 + (0.050000001 * ((0.69999999 * sin((((sin((_qos3462.x * 3.0)) / 3.0) - (0.5 * _qos3462.y)) * 350.0))) + (0.30000001 * sin((((_qos3462.x - (0.80000001 * _qos3462.y)) * 250.0) + 1.0))))));
float _d3470 = (_be3467.x - (_ra3468 * _dd3469));
float _mask3471 = (1.0 - smoothstep(-0.0049999999, 0.0099999998, _d3470));
(_col = lerp(_col, float3(0.039999999, 0.02, 0.02), (_mask3471 * _dd3469)));
}
float sdda = (1.0 - smoothstep(-0.40000001, 1.0, _uvw3453.y));
(_focc3461 = (0.2 + (0.80000001 * (sdda * sdda))));
(_focc3461 *= (0.5 + (0.5 * smoothstep(-1.5, -0.75, _uvw3453.y))));
(_focc3461 *= (1.0 - smoothstep(0.40000001, 0.75, abs(_uvw3453.x))));
(_focc3461 *= (1.0 - (0.40000001 * smoothstep(0.2, 0.5, _uvw3453.y))));
(_focc3461 *= (1.0 - smoothstep(1.0, 1.3, ((1.7 * _uvw3453.y) - _uvw3453.x))));
}
else
{
if ((_tm3454.y < 2.5))
{
(_sss3460 = 1.0);
float3 _qos3472 = vec3_ctor(abs(_uvw3453.x), _uvw3453.yz);
float _ss3473 = sign(_uvw3453.x);
float _dt3474 = floor((_time * 1.1));
float _ft3475 = frac((_time * 1.1));
float2 _da03476 = (sin((1.7 * (_dt3474 + 0.0))) + sin(((2.3 * (_dt3474 + 0.0)) + float2(1.0, 2.0))));
float2 _da13477 = (sin((1.7 * (_dt3474 + 1.0))) + sin(((2.3 * (_dt3474 + 1.0)) + float2(1.0, 2.0))));
float2 _da3478 = lerp(_da03476, _da13477, smoothstep(0.89999998, 1.0, _ft3475));
float _gg3479 = f_animEye(_time);
(_da3478 *= (1.0 + (0.5 * _gg3479)));
(_qos3472.yz = f_rot(_qos3472.yz, ((_da3478.y * 0.0040000002) - 0.0099999998)));
(_qos3472.xz = f_rot(_qos3472.xz, ((((_da3478.x * 0.0040000002) * _ss3473) - ((_gg3479 * _ss3473) * (0.029999999 - (step(0.0, _ss3473) * 0.014)))) + 0.02)));
float3 _eos3480 = (_qos3472 - vec3_ctor(0.31, (-0.055 - (0.029999999 * _animData.x)), 0.44999999));
float _r3481 = (length(_eos3480.xy) + 0.0049999999);
float _a3482 = atan_emu(_eos3480.y, (_ss3473 * _eos3480.x));
float3 _iris3483 = {0.090000004, 0.031500001, 0.0135};
(_iris3483 += ((_iris3483 * 3.0) * (1.0 - smoothstep(0.0, 1.0, abs(((_a3482 + 3.1415901) - 2.5))))));
(_iris3483 *= (0.34999999 + (0.69999999 * gl_texture2D(_iChannel2, vec2_ctor(_r3481, (_a3482 / 6.2831001))).x)));
(_col = float3(0.41999999, 0.41999999, 0.41999999));
(_col *= (0.1 + (0.89999998 * smoothstep(0.1, 0.114, _r3481))));
(_col = lerp(_col, _iris3483, (1.0 - smoothstep(0.094999999, 0.1, _r3481))));
(_col *= smoothstep(0.050000001, 0.07, _r3481));
float _edis3484 = length(((vec2_ctor(abs(_uvw3453.x), _uvw3453.y) - float2(0.31, -0.07)) / float2(1.3, 1.0)));
(_col *= lerp(float3(1.0, 1.0, 1.0), float3(0.40000001, 0.2, 0.1), f_linearstep(0.07, 0.16, _edis3484)));
(_qos3472 = vec3_ctor(abs(_uvw3453.x), _uvw3453.yz));
(_col += ((0.5 - (_gg3479 * 0.30000001)) * (1.0 - smoothstep(0.0, 0.02, length((_qos3472.xy - vec2_ctor((0.28999999 - (0.050000001 * _ss3473)), 0.0)))))));
(_se3458 = 128.0);
float sddb = (1.0 - smoothstep(-0.40000001, 1.0, _uvw3453.y));
(_focc3461 = (0.2 + (0.80000001 * (sddb * sddb))));
(_focc3461 *= (1.0 - f_linearstep(0.1, 0.17, _edis3484)));
}
else
{
if ((_tm3454.y < 3.5))
{
(_sss3460 = 0.0);
(_col = vec3_ctor((0.81 * gl_texture3D(_iChannel0, (_uvw3453 * 6.0)).x)));
(_ks3457 *= 2.0);
if ((abs(_uvw3453.x) < 0.66000003))
{
float _par3485 = length((_uvw3453.yz - float2(-1.05, 0.64999998)));
(_col *= lerp(float3(1.0, 1.0, 1.0), float3(0.42000002, 0.14, 0.56), (1.0 - smoothstep(0.1, 0.11, _par3485))));
(_col *= smoothstep(0.0049999999, 0.0099999998, abs((_par3485 - 0.105))));
}
(_focc3461 = lerp(1.0, (0.029999999 + (0.97000003 * smoothstep(-0.15000001, 1.7, _uvw3453.z))), (smoothstep(-1.6, -1.3, _uvw3453.y) * (1.0 - clamp(dot(_nor3456.xz, normalize(_uvw3453.xz)), 0.0, 1.0)))));
}
else
{
if ((_tm3454.y < 4.5))
{
(_sss3460 = 0.0);
float3 sdcc = {0, 0, 0};
if ((sin(_cma3452.x) > 0.69999999))
{
(sdcc = float3(0.044999998, 0.015, 0.075000003));
}
else
{
(sdcc = float3(0.016000001, 0.0080000004, 0.0040000002));
}
(_col = sdcc);
(_ks3457 *= (0.75 + (_cma3452.z * 18.0)));
float _te3486 = gl_texture2D(_iChannel2, vec2_ctor((0.25 * atan_emu(_uvw3453.x, _uvw3453.y)), (8.0 * _uvw3453.z))).x;
(_col *= (2.0 * _te3486));
(_ks3457 *= (1.5 * _te3486));
(_focc3461 = (1.0 - smoothstep(-0.40000001, 0.80000001, _uvw3453.y)));
(_focc3461 *= (1.0 - (0.94999999 * smoothstep(-1.2, -0.2, (-_uvw3453.z)))));
(_focc3461 *= (0.5 + (_cma3452.z * 12.0)));
}
else
{
if ((_tm3454.y < 5.5))
{
(_sss3460 = 1.0);
(_col = float3(0.30000001, 0.30000001, 0.30000001));
(_ks3457 *= 1.5);
}
}
}
}
}
float _fre3487 = clamp((1.0 + dot(_nor3456, _rd)), 0.0, 1.0);
float _occ3488 = (_focc3461 * f_calcOcclusion(_pos3455, _nor3456, _time));
float3 _lin3489 = {0.0, 0.0, 0.0};
float _nma3490 = {0.0};
if ((_tm3454.y < 1.5))
{
(_nma3490 = (1.0 - smoothstep(0.0, 0.12, length(((_uvw3453.xy - float2(0.0, -0.37)) / float2(2.4000001, 0.69999999))))));
}
float3 _lig3491 = {0.56999999, 0.46000001, 0.68000001};
float3 _hal3492 = normalize((_lig3491 - _rd));
float _dif3493 = clamp(dot(_nor3456, _lig3491), 0.0, 1.0);
float _sha3494 = f_calcSoftshadow((_pos3455 + (_nor3456 * 0.0020000001)), _lig3491, 9.9999997e-05, 2.0, _time, 5.0);
float sddc = clamp((1.0 - dot(_hal3492, (-_rd))), 0.0, 1.0);
float _spe3495 = (((((2.0 * _ks3457) * pow(clamp(dot(_nor3456, _hal3492), 0.0, 1.0), _se3458)) * _dif3493) * _sha3494) * (0.039999999 + (0.95999998 * ((((sddc * sddc) * sddc) * sddc) * sddc))));
float3 _cocc3496 = lerp(vec3_ctor(_occ3488), vec3_ctor((0.1 + (0.89999998 * _occ3488)), ((0.89999998 * _occ3488) + ((0.1 * _occ3488) * _occ3488)), ((0.80000001 * _occ3488) + ((0.2 * _occ3488) * _occ3488))), _tinterShadow3459);
(_cocc3496 = lerp(_cocc3496, float3(1.0, 0.30000001, 0.0), _nma3490));
(_sha3494 = lerp(_sha3494, max(_sha3494, 0.30000001), _nma3490));
float3 _amb3497 = (_cocc3496 * (0.55000001 + (0.44999999 * _nor3456.y)));
float _bou3498 = clamp((0.30000001 - (0.69999999 * _nor3456.x)), 0.0, 1.0);
(_lin3489 += ((float3(0.64999998, 1.05, 2.0) * _amb3497) * 1.15));
(_lin3489 += ((float3(2.4000001, 2.0999999, 1.8000001) * f_sdif(dot(_nor3456, _lig3491), ((0.5 + (0.30000001 * _nma3490)) + ((0.2 * (1.0 - _occ3488)) * _tinterShadow3459)))) * lerp(vec3_ctor(_sha3494), vec3_ctor(_sha3494, ((0.2 * _sha3494) + ((0.69999999 * _sha3494) * _sha3494)), ((0.2 * _sha3494) + ((0.69999999 * _sha3494) * _sha3494))), _tinterShadow3459)));
(_lin3489 += (((((float3(1.0, 0.30000001, 0.1) * _sss3460) * _fre3487) * 0.60000002) * (0.5 + (((0.5 * _dif3493) * _sha3494) * _amb3497))) * (0.1 + (0.89999998 * _focc3461))));
(_lin3489 += (((float3(1.4, 0.69999999, 0.34999999) * _bou3498) * _occ3488) * _col));
(_col = (((_lin3489 * _col) + _spe3495) + ((((_fre3487 * _fre3487) * _fre3487) * 0.1) * _occ3488)));
(_col *= 1.1);
}
return _col;
}
float f_animTurn(in float _time)
{
float _t3502 = mod_emu(_time, 12.2);
float3 sdcd = {0, 0, 0};
if ((_t3502 < 6.0999999))
{
(sdcd = float3(0.0, 0.0, 1.0));
}
else
{
(sdcd = float3(6.0999999, 1.0, -1.0));
}
float3 _p3503 = sdcd;
return (_p3503.y + (_p3503.z * f_expSustainedImpulse((_t3502 - _p3503.x), 1.0, 10.0)));
}
float f_animBlink(in float _time, in float _smo)
{
float _t3508 = mod_emu((_time - 0.31), 6.0999999);
float _blink3509 = (smoothstep(0.0, 0.1, _t3508) - smoothstep(0.18000001, 0.40000001, _t3508));
float _tt3510 = mod_emu((1.0 + _time), 3.0);
(_blink3509 = max(_blink3509, (smoothstep(0.0, (0.07 + (0.07 * _smo)), _tt3510) - smoothstep((0.1 + (0.039999999 * _smo)), (0.34999999 + (0.30000001 * _smo)), _tt3510))));
float _blinkBase3511 = (0.039999999 * (0.5 + (0.5 * sin(_time))));
(_blink3509 = lerp(_blinkBase3511, 1.0, _blink3509));
float _down3512 = {0.15000001};
return (_down3512 + ((1.0 - _down3512) * _blink3509));
}
void f_mainImage_float4(inout float4 _fragColor, in float2 _fragCoord)
{
float3 _tot3516 = {0.0, 0.0, 0.0};
float2 _p3517 = (((-_iResolution.xy) + (2.0 * _fragCoord)) / _iResolution.y);
float _time3518 = _iTime;
(_time3518 += 2.0);
float3 _ro3519 = {0, 0, 0};
float _fl3520 = {0};
float3x3 _ca3521 = f_calcCamera(_time3518, _ro3519, _fl3520);
float3 _rd3522 = mul(transpose(_ca3521), normalize(vec3_ctor(((_p3517 - float2(-0.51999998, 0.12)) / 1.1), _fl3520)));
float _turn3523 = f_animTurn(_time3518);
(_animData.x = f_animBlink(_time3518, 0.0));
(_animData.y = f_animBlink((_time3518 - 0.02), 1.0));
(_animData.z = ((-0.25 + ((0.2 * (1.0 - _turn3523)) * smoothstep(-0.30000001, 0.89999998, sin((_time3518 * 1.1))))) + (0.050000001 * cos((_time3518 * 2.7)))));
(_animHead = vec3_ctor(sin((_time3518 * 0.5)), sin((_time3518 * 0.30000001)), (-cos((_time3518 * 0.2)))));
(_animHead = ((_animHead * _animHead) * _animHead));
(_animHead.x = ((-0.025 * _animHead.x) + (0.2 * (0.69999999 + (0.30000001 * _turn3523)))));
(_animHead.y = (0.1 + (((0.02 * _animHead.y) * _animHead.y) * _animHead.y)));
(_animHead.z = ((-0.029999999 * (0.5 + (0.5 * _animHead.z))) - ((1.0 - _turn3523) * 0.050000001)));
float4 _tmp3524 = gl_texture2DFetch(_iChannel1, ivec2_ctor(_fragCoord), 0);
float3 _col3525 = _tmp3524.xyz;
float _tmin3526 = _tmp3524.w;
FLATTEN if ((((((_p3517.x * 1.4) + _p3517.y) < 0.80000001) && ((((-_p3517.x) * 4.5) + _p3517.y) < 6.5)) && (_p3517.x < 0.47999999)))
{
(_col3525 = f_renderGirl(_p3517, _ro3519, _rd3522, _tmin3526, _col3525, _time3518));
}
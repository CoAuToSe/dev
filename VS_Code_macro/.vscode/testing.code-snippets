{
  // Place your espace de travail VS_Code_macro snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    // "scope": "javascript,typescript",
    "prefix": "log",
    "body": [
      "console.log('$1');",
      "$2"
    ],
    "description": "Log output to console"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ]
  },
  "Insert task list": {
    "prefix": "task",
    "body": [
      "- [${1| ,x|}] ${2:text}",
      "${0}"
    ]
  },
  "Insert block comment with date": {
    "prefix": "date comment",
    "body": [
      "${BLOCK_COMMENT_START}",
      "${CURRENT_YEAR}/${CURRENT_MONTH}/${CURRENT_DATE} ${1}",
      "${BLOCK_COMMENT_END}"
    ]
  },
  "Insert block comment with date": {
    "prefix": "testing",
    "body": [
      "${BLOCK_COMMENT_START}",
      "${CURRENT_YEAR}/${CURRENT_MONTH}/${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} ${TM_SELECTED_TEXT} ${1}",
      "${BLOCK_COMMENT_END}"
    ]
  },
  "Create new Yew component": {
    "scope": "rust",
    "prefix": "yew",
    "body": [
      "use wasm_bindgen::prelude::*;",
      "use yew::prelude::*;",
      "",
      "pub struct ${0} {",
      "    link: ComponentLink<Self>,",
      "    value: i32,",
      "}",
      "",
      "pub enum Msg {",
      "    AddOne,",
      "}",
      "",
      "impl Component for ${0} {",
      "    type Message = Msg;",
      "    type Properties = ();",
      "",
      "    fn create(props: Self::Properties, link: ComponentLink<Self>) -> Self {",
      "        Self {",
      "            link,",
      "            value: 0",
      "        }",
      "    }",
      "",
      "    fn update(&mut self, msg: Self::Message) -> ShouldRender {",
      "        match msg {",
      "            Msg::AddOne => self.value += 1",
      "        }",
      "        true",
      "    }",
      "",
      "    fn change(&mut self, props: Self::Properties) -> ShouldRender {",
      "        false",
      "    }",
      "",
      "    fn view(&self) -> Html {",
      "        html! {",
      "            <>",
      "                <nav class=\"nav\">",
      "                    { self.value }",
      "                </nav>",
      "            </>",
      "        }",
      "    }",
      "}",
    ],
    "description": "Create new Yew component"
  }
}